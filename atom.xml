<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeePeng&#39;s blog</title>
  
  <subtitle>前端&amp;设计</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.leepeng.top/"/>
  <updated>2018-09-17T08:38:17.478Z</updated>
  <id>http://blog.leepeng.top/</id>
  
  <author>
    <name>LeePeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js-promise</title>
    <link href="http://blog.leepeng.top/2018/08/27/js-promise/"/>
    <id>http://blog.leepeng.top/2018/08/27/js-promise/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-09-17T08:38:17.478Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><h3 id="Js-Promise"><a href="#Js-Promise" class="headerlink" title="Js-Promise"></a>Js-Promise</h3><p><img src="/images/about-bg.jpg" class="full-image"><br>promise是用来干什么的？<br>用来处理回调，避免回调地狱<br>用来更好地处理异步行为</p><blockquote><p>Promise 有三个状态<br>  -pending  初始状态 ，未定<br>  -fulfilled 完成状态 ，成功 （resolve =&gt; fulfilled）<br>  -reject   失败<br><!-- 不可逆 --></p></blockquote><a id="more"></a><blockquote><p>.then() 有两个参数，这两个参数都是函数，它们其实是在.then()方法里进行的回调，成功：resolve失败：reject<br>.then 调用的是一个Promise对象，每一个.then()方法，都会获得上一次.then()的执行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 创建了一个Peomise对象实例 ，_promise1</span><br><span class="line">let _promise1 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    resolve(&apos;2秒后，打印一个xx&apos;)</span><br><span class="line">  &#125;,2000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_promise1</span><br><span class="line">  .then(function(_data)&#123;</span><br><span class="line">    // 第一个.then()，就是第一个嵌套函数</span><br><span class="line">    // resolve,执行它</span><br><span class="line">    // 因为在seTimeout里调用的就是resolve</span><br><span class="line">    console.log(_data) //2秒后，打印一个xx</span><br><span class="line">    return &apos;lee&apos;</span><br><span class="line">  &#125;,function(_err)&#123;</span><br><span class="line">    //reject</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(data)&#123;</span><br><span class="line">    // 第二个.then()，就是第二个嵌套函数</span><br><span class="line">    // 它执行的data是第一个.then()返回的值</span><br><span class="line">    console.log(data) // lee</span><br><span class="line">    return `$&#123;data&#125; peng`</span><br><span class="line">  &#125;,function(err)&#123;</span><br><span class="line">    //reject</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(data)&#123;</span><br><span class="line">    // 第三个.then()，就是第三个嵌套函数</span><br><span class="line">    // 它执行的data是第二个.then()返回的值</span><br><span class="line">    console.log(data) // lee peng</span><br><span class="line">  &#125;,function(err)&#123;</span><br><span class="line">    //reject</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>.catch()<br>也返回一个Promise对象，主要用于捕获异常，所以一般.then()的第二个参数都不写，都用.catch()方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 创建了一个Peomise对象实例 ，_promise2</span><br><span class="line">let _promise2 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    reject(&apos;这是一个失败操作&apos;)</span><br><span class="line">  &#125;,2000)</span><br><span class="line">&#125;)</span><br><span class="line">_promise2</span><br><span class="line">  .then(function()&#123;</span><br><span class="line">    console.log(`成功会走这`)</span><br><span class="line">  &#125;,function(_err)&#123; // 如果这里有了错误捕获，.catch()就不起作用了</span><br><span class="line">    console.log(`_err: $&#123;_err&#125;`)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function(err)&#123;</span><br><span class="line">    console.log(`catch: $&#123;err&#125;`)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>.all()方法<br> 接收一个 promise 对象的数组作为参数，当这个数组里的所有 promise 对象全部变为resolve或 有 reject 状态出现的时候，它才会去调用 .then 方法,它们是并发执行的。<br>它就是迭代数组，用来操作一个异步什么的，其实就是一个循环<br>.all() 是一个静态方法，可以直接调用，不用new</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let p1 = new Promise((reslove, reject) =&gt;&#123;</span><br><span class="line">    setTimeout(reslove, 1000, &apos;111&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  let p2 = new Promise((reslove, reject) =&gt;&#123;</span><br><span class="line">    setTimeout(reject, 2000, &apos;222&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  let p3 = new Promise((reslove, reject) =&gt;&#123;</span><br><span class="line">    setTimeout(reslove, 3000, &apos;333&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  Promise.all([p1,p2,p3])</span><br><span class="line">  .then(result =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(err=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//Promse.all在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标。</span><br><span class="line">// Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。</span><br><span class="line">//代码模拟</span><br><span class="line">let wake = (time) =&gt;&#123;</span><br><span class="line">  return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">    setTimeout(resolve, time, `$&#123;time/1000&#125; 秒后醒来`)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">let p1 = wake(2000)</span><br><span class="line">let p2 = wake(3000)</span><br><span class="line">Promise.all([p1,p2])</span><br><span class="line">  .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>.race()<br>它的参数是一组可以迭代的参数<br>只要一组参数中，有任意一个发生变化，那么Pormise对象的状态就改变了<br>Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let p1 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    setTimeout(resolve, 300, &apos;p1...XXX&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  let p2 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    setTimeout(resolve, 30, &apos;P2....XXXX&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">  let p3 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    setTimeout(reject,200,&apos;P3...XXX&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Promise</span><br><span class="line">    .race([p1,p2,p3])</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">      console.log(data) // 谁先变化就用谁的值--p2最先完成  P2....XXXX</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(err)&#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>resolve() 接收一个参数<br>                 –可以是普通的值<br>                 –可以是一个含的.then()方法的对象<br>                 –可以是一个Promise实例<br>三种形式的参数，无非是对数据的三种包装而已</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//（1）参数是一个 Promise 实例</span><br><span class="line">//如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。</span><br><span class="line"></span><br><span class="line">//（2）参数是一个thenable对象</span><br><span class="line">//thenable对象指的是具有then方法的对象，比如下面这个对象。</span><br><span class="line">let thenable = &#123;</span><br><span class="line">  then: function(resolve, reject) &#123;</span><br><span class="line">    resolve(42);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。</span><br><span class="line">let p1 = Promise.resolve(thenable);</span><br><span class="line">p1.then(function(value) &#123;</span><br><span class="line">  console.log(value);  // 42</span><br><span class="line">&#125;);</span><br><span class="line">//上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出 42。</span><br><span class="line"></span><br><span class="line">//（3）参数不是具有then方法的对象，或根本就不是对象</span><br><span class="line">//如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。</span><br><span class="line">const p = Promise.resolve(&apos;Hello&apos;);</span><br><span class="line">p.then(function (s)&#123;</span><br><span class="line">  console.log(s)// Hello</span><br><span class="line">&#125;);</span><br><span class="line">// 上面代码生成一个新的 Promise 对象的实例p。</span><br><span class="line">// 由于字符串Hello不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。</span><br><span class="line">// Promise.resolve方法的参数，会同时传给回调函数。</span><br></pre></td></tr></table></figure><blockquote><p>reject()<br>它接收的参数就是异常，此时返回Promise对象的状态是reject –失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let L1 = Promise.reject(&apos;失败的操作&apos;)</span><br><span class="line">L1.then(function(data)&#123;</span><br><span class="line">    // 成功的</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function(err)&#123;</span><br><span class="line">    console.log(`catch$&#123;err&#125;`)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;h3 id=&quot;Js-Promise&quot;&gt;&lt;a href=&quot;#Js-Promise&quot; class=&quot;headerlink&quot; title=&quot;Js-Promise&quot;&gt;&lt;/a&gt;Js-Promise&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt;&lt;br&gt;promise是用来干什么的？&lt;br&gt;用来处理回调，避免回调地狱&lt;br&gt;用来更好地处理异步行为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Promise 有三个状态&lt;br&gt;  -pending  初始状态 ，未定&lt;br&gt;  -fulfilled 完成状态 ，成功 （resolve =&amp;gt; fulfilled）&lt;br&gt;  -reject   失败&lt;br&gt;&lt;!-- 不可逆 --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="-promise -js" scheme="http://blog.leepeng.top/tags/promise-js/"/>
    
  </entry>
  
  <entry>
    <title>web-storage</title>
    <link href="http://blog.leepeng.top/2018/08/25/web-storage/"/>
    <id>http://blog.leepeng.top/2018/08/25/web-storage/</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2018-09-17T08:21:37.790Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><h3 id="WebStorage-cookie-localStorage-sessionStorage"><a href="#WebStorage-cookie-localStorage-sessionStorage" class="headerlink" title="WebStorage-cookie/localStorage/sessionStorage"></a>WebStorage-cookie/localStorage/sessionStorage</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><blockquote><p>web前端存储 cookie/localStorage/sessionStorage<br>cookie 大小4kb 提交时大于4kb的部分会直接截断<br>document.cookie=”Name=value;expires=Sat, 02 May 2019 23:38:25 GMT;domain=.leepeng.top;path=/blog;secure”</p><p>Cookie只是应用于浏览器端，一旦选项被设置后便不会被服务器重新取回。<br>如果在指定的请求中有多个cookies，那么它们会被分号和空格分开，例如：<br>Name=value</p><p>有效期选项（The expires  option）<br>expires指定了cookie何时不会再被发送到服务器端的，因此该cookie可能会被浏览器删掉。<br>该选项所对应的值是一个格式为Wdy,DD-Mon–YYYY HH:MM:SS GMT的值，例如：<br> expires=Sat, 02 May 2009 23:38:25 GMT //toUTCString()转换<br>在没有expires选项时，cookie的寿命仅限于单一的会话中。<br>浏览器的关闭意味这一次会话的结束，所以会话cookie只存在于浏览器保持打开的状态之下。<br>如果expires选项设置了一个过去的时间点，那么这个cookie会被立即删除。</p></blockquote><a id="more"></a><blockquote><p>domain选项（The domain option）<br>跨子域传cookie。<br>domain=.leepeng.top</p><p>Path选项（The path option）<br>另一个控制何时发送Cookie消息头的方式是指定path选项。<br>与domain选项相同的是，path指明了在发Cookie消息头之前必须在请求资源中存在一个URL路径。<br>这个比较是通过将path属性值与请求的URL从头开始逐字符串比较完成的。<br>如果字符匹配，则发送Cookie消息头，例如：<br> path=/blog<br>在这个例子中，path选项值会与/blog,/blogrool等等相匹配；<br>任何以/blog开头的选项都是合法的。要注意的是只有在domain选项核实完毕之后才会对path属性进行比较。<br>path属性的默认值是发送Set-Cookie消息头所对应的URL中的path部分。</p><p>secure选项（The  secure  option）<br>最后一个选项是secure。不像其它选项，该选项只是一个标记并且没有其它的值。<br>一个secure cookie只有当请求是通过SSL和HTTPS创建时，才会发送到服务器端。<br>这种cookie的内容意指具有很高的价值并且可能潜在的被破解以纯文本形式传输。例如<br> secure<br>现实中，机密且敏感的信息绝不应该在cookies中存储或传输，因为cookies的整个机制都是原本不安全的。<br>默认情况下，在HTTPS链接上传输的cookies都会被自动添加上secure选项。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(Name,value,days,domain,path,secure)&#123;</span><br><span class="line">  var exp = new Date();</span><br><span class="line">  exp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000);//过期时间天</span><br><span class="line">  expires_time = exp.toGMTString();</span><br><span class="line">  document.cookie = Name +&quot;=&quot; + escape(value) + &quot;;expires=&quot; + expires_time;</span><br><span class="line">&#125;</span><br><span class="line">function getCookie(name)&#123;</span><br><span class="line">  let searchName = name+&quot;=&quot;; // username=</span><br><span class="line">  let c = document.cookie.indexOf(searchName);</span><br><span class="line">  if (c != -1)&#123;</span><br><span class="line">    console.log(&quot;已注册&quot;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    console.log(&quot;您还没注册&quot;);</span><br><span class="line">    setCookie(username,leepeng,7)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 删除cookie 设置过期时间</span><br><span class="line">function clearCookie(name) &#123;  </span><br><span class="line">  setCookie(name, &quot;&quot;, -1);  </span><br><span class="line">&#125; </span><br><span class="line">getCookie(&apos;username&apos;)</span><br></pre></td></tr></table></figure><h3 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h3><blockquote><p>localStorage 和 sessionStorage 属性允许在浏览器中存储 key/value 对的数据。用法相同<br>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据<br>如果你想在浏览器窗口关闭后还保留数据，可以使用 localStorage 属性， 改数据对象没有过期时间，今天、下周、明年都能用，除非你手动去删除。</p><p>window.sessionStorage</p><p>保存数据语法：<br>sessionStorage.setItem(“key”, “value”);<br>sessionStorage.setItem($(this).val(),JSON.stringify(obj)); //JSON.stringify()将对象转为json字符串存储</p><p>读取数据语法：<br>var lastname = sessionStorage.getItem(“key”);<br>JSON.parse(sessionStorage.getItem(key)); //JSON.parse()方法用于将一个 JSON 字符串转换为对象。</p><p>删除指定键的数据语法：<br>sessionStorage.removeItem(“key”);</p><p>删除所有数据：<br>sessionStorage.clear();</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;h3 id=&quot;WebStorage-cookie-localStorage-sessionStorage&quot;&gt;&lt;a href=&quot;#WebStorage-cookie-localStorage-sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;WebStorage-cookie/localStorage/sessionStorage&quot;&gt;&lt;/a&gt;WebStorage-cookie/localStorage/sessionStorage&lt;/h3&gt;&lt;h4 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;web前端存储 cookie/localStorage/sessionStorage&lt;br&gt;cookie 大小4kb 提交时大于4kb的部分会直接截断&lt;br&gt;document.cookie=”Name=value;expires=Sat, 02 May 2019 23:38:25 GMT;domain=.leepeng.top;path=/blog;secure”&lt;/p&gt;
&lt;p&gt;Cookie只是应用于浏览器端，一旦选项被设置后便不会被服务器重新取回。&lt;br&gt;如果在指定的请求中有多个cookies，那么它们会被分号和空格分开，例如：&lt;br&gt;Name=value&lt;/p&gt;
&lt;p&gt;有效期选项（The expires  option）&lt;br&gt;expires指定了cookie何时不会再被发送到服务器端的，因此该cookie可能会被浏览器删掉。&lt;br&gt;该选项所对应的值是一个格式为Wdy,DD-Mon–YYYY HH:MM:SS GMT的值，例如：&lt;br&gt; expires=Sat, 02 May 2009 23:38:25 GMT //toUTCString()转换&lt;br&gt;在没有expires选项时，cookie的寿命仅限于单一的会话中。&lt;br&gt;浏览器的关闭意味这一次会话的结束，所以会话cookie只存在于浏览器保持打开的状态之下。&lt;br&gt;如果expires选项设置了一个过去的时间点，那么这个cookie会被立即删除。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="-web-storage -cookie -localStorage -sessionStorage" scheme="http://blog.leepeng.top/tags/web-storage-cookie-localStorage-sessionStorage/"/>
    
  </entry>
  
  <entry>
    <title>分页组件pagination</title>
    <link href="http://blog.leepeng.top/2018/08/17/page-pagination/"/>
    <id>http://blog.leepeng.top/2018/08/17/page-pagination/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2018-08-17T08:01:02.700Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><p><img src="/images/geturl.jpg" class="full-image"></p><h3 id="分页组件需求如下"><a href="#分页组件需求如下" class="headerlink" title="分页组件需求如下"></a>分页组件需求如下</h3><blockquote><p> 1、最多连续显示5页，居中高亮显示current页（如demo1所示)<br>2、total为0时，隐藏整个元素（如demo2所示）<br>3、如果total&lt;=5，则显示全部页数，隐藏“首页”和“末页”元素（如demo3所示）<br>4、当current居中不足5页，向后(前)补足5页，隐藏“首页”(“末页”)元素(如demo4和demo5所示)<br>5、total、current均为正整数，1 &lt;= current（当前） &lt;= total（总页数）</p></blockquote><p><style>#jsPagination ul{display: flow-root;}#jsPagination ul li{display: inline-block; border:1px solid #999; padding: 3px 10px;}#jsPagination ul li.cur{background: #999;}</style></p><p><div id="jsPagination"></div></p><script>const perpages=5;//按钮个数const step = (perpages-1)/2;let jsPaginationbox = document.querySelector('#jsPagination')function jsPagination(total,current){  jsPaginationbox.innerHTML='';  const _step = {    start:current-step,    end:current+step  }  if(_step.start<1){    _step.end = _step.end + (1 - _step.start)    _step.start = 1    //console.log(_step.end,_step.start)  }  if(_step.end>total){    _step.start = _step.start - (_step.end - total);    _step.end = total;    //console.log(_step.end,_step.start)  }  if (_step.start < 1) _step.start = 1  //console.log(_step.end,_step.start)  let htmlLi=''  let Ul = document.createElement('ul');  if(current !==1 ){    htmlLi += '<li id="'+(current-1)+'">上一页</li>'  }  for (let i = _step.start; i <= _step.end; i++) {    if(current === i){      htmlLi += '<li class="cur">'+i+'</li>'    }else{      htmlLi += '<li id="'+i+'">'+i+'</li>'    }    //let arr.push(i)  }  if(current !==_step.end ){    htmlLi += '<li id="'+(current+1)+'">下一页</li>'  }  Ul.innerHTML = htmlLi  //console.log(Ul)  jsPaginationbox.appendChild(Ul)}jsPagination(10,1);let ulBox = jsPaginationbox.querySelector('ul')let pageLi = ulBox.querySelectorAll('li')jsPaginationbox.addEventListener('click',function (event){  let el = event.target  if(el.tagName.toLowerCase() === 'li'){    let id= +(el.getAttribute("id"));    jsPagination(10,id);  }},false)</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#jsPagination ul&#123;display: flow-root;&#125;</span><br><span class="line">#jsPagination ul li&#123;display: inline-block; border:1px solid #999; padding: 3px 10px;&#125;</span><br><span class="line">#jsPagination ul li.cur&#123;background: #999;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;jsPagination&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function $(id)&#123;</span><br><span class="line">  if(typeof id !== &apos;string&apos;)&#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  let firstStr = id.charAt(0);</span><br><span class="line">  if(firstStr === &apos;#&apos;)&#123;</span><br><span class="line">    return document.querySelector(id);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    let len = document.querySelectorAll(id).length;</span><br><span class="line">    console.log(len)</span><br><span class="line">    return len == 1 ? document.querySelectorAll(id)[0] : document.querySelectorAll(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const perpages=5;//按钮个数</span><br><span class="line">const step = (perpages-1)/2;</span><br><span class="line">function jsPagination(total,current)&#123;</span><br><span class="line">  $(&quot;#jsPagination&quot;).innerHTML=&apos;&apos;;</span><br><span class="line">  const _step = &#123;</span><br><span class="line">    start:current-step,</span><br><span class="line">    end:current+step</span><br><span class="line">  &#125;</span><br><span class="line">  if(_step.start&lt;1)&#123;</span><br><span class="line">    _step.end = _step.end + (1 - _step.start)</span><br><span class="line">    _step.start = 1</span><br><span class="line">    //console.log(_step.end,_step.start)</span><br><span class="line">  &#125;</span><br><span class="line">  if(_step.end&gt;total)&#123;</span><br><span class="line">    _step.start = _step.start - (_step.end - total);</span><br><span class="line">    _step.end = total;</span><br><span class="line">    //console.log(_step.end,_step.start)</span><br><span class="line">  &#125;</span><br><span class="line">  if (_step.start &lt; 1) _step.start = 1</span><br><span class="line">  //console.log(_step.end,_step.start)</span><br><span class="line">  let htmlLi=&apos;&apos;</span><br><span class="line">  let Ul = document.createElement(&apos;ul&apos;);</span><br><span class="line">  if(current !==1 )&#123;</span><br><span class="line">    htmlLi += &apos;&lt;li id=&quot;&apos;+(current-1)+&apos;&quot;&gt;上一页&lt;/li&gt;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i = _step.start; i &lt;= _step.end; i++) &#123;</span><br><span class="line">    if(current === i)&#123;</span><br><span class="line">      htmlLi += &apos;&lt;li class=&quot;cur&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      htmlLi += &apos;&lt;li id=&quot;&apos;+i+&apos;&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    //let arr.push(i)</span><br><span class="line">  &#125;</span><br><span class="line">  if(current !==_step.end )&#123;</span><br><span class="line">    htmlLi += &apos;&lt;li id=&quot;&apos;+(current+1)+&apos;&quot;&gt;下一页&lt;/li&gt;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  Ul.innerHTML = htmlLi</span><br><span class="line">  //console.log(Ul)</span><br><span class="line">  $(&quot;#jsPagination&quot;).appendChild(Ul)</span><br><span class="line">&#125;</span><br><span class="line">jsPagination(10,1);</span><br><span class="line">let pageLi = $(&quot;#jsPagination ul&quot;).querySelectorAll(&apos;li&apos;)</span><br><span class="line">$(&quot;#jsPagination&quot;).addEventListener(&apos;click&apos;,function (event)&#123;</span><br><span class="line">  let el = event.target</span><br><span class="line">  if(el.tagName.toLowerCase() === &apos;li&apos;)&#123;</span><br><span class="line">    let id= +(el.getAttribute(&quot;id&quot;));</span><br><span class="line">    jsPagination(10,id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;p&gt;&lt;img src=&quot;/images/geturl.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;分页组件需求如下&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="-js -分页" scheme="http://blog.leepeng.top/tags/js-%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>获取url参数</title>
    <link href="http://blog.leepeng.top/2018/03/02/get-url-parameter/"/>
    <id>http://blog.leepeng.top/2018/03/02/get-url-parameter/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-06-14T15:29:06.041Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><p><img src="/images/geturl.jpg" class="full-image"></p><h3 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h3><blockquote><ol><li>指定参数名称，返回该参数的值 或者 空字符串</li><li>不指定参数名称，返回全部的参数对象 或者 {}</li><li>如果存在多个同名参数，则返回数组<br>window.location.href 取当前页面url</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 获取 url 中的参数</span><br><span class="line">  let Urlstr = &apos;http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe&apos;;</span><br><span class="line">  function getUrlParam(sUrl, sKey) &#123;</span><br><span class="line">    console.log(sKey)</span><br><span class="line">    let queryString = sUrl.split(&apos;#&apos;)[0].split(&apos;?&apos;)[1];</span><br><span class="line">    console.log(queryString)</span><br><span class="line">    // queryString==undefined  ===&gt;url中没有？||#</span><br><span class="line">    // queryString==&apos;&apos;     ===&gt;url中有？||# 但没参数</span><br><span class="line">    if(queryString==undefined || queryString==&apos;&apos;)&#123;</span><br><span class="line">      if(sKey==undefined)&#123; // 是否有传入key</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        return &apos;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    let query = queryString.split(&apos;&amp;&apos;);</span><br><span class="line">    let newObj=&#123;&#125;;</span><br><span class="line">    for(let i=0;i&lt;query.length;i++)&#123;</span><br><span class="line">      let keyValue = query[i].split(&apos;=&apos;);</span><br><span class="line">      let key = keyValue[0]</span><br><span class="line">      let value = keyValue[1]</span><br><span class="line">      if (!(key in newObj)) &#123;</span><br><span class="line">        newObj[key] = [];</span><br><span class="line">      &#125;</span><br><span class="line">      newObj[key].push(value); </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(newObj)</span><br><span class="line">    if(sKey)&#123;</span><br><span class="line">      // console.log(newObj[sKey])</span><br><span class="line">      return newObj[sKey] ? newObj[sKey] : &apos;&apos;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return newObj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(getUrlParam(Urlstr,&apos;key&apos;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;p&gt;&lt;img src=&quot;/images/geturl.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取url参数&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="-js" scheme="http://blog.leepeng.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://blog.leepeng.top/2017/11/21/ajax/"/>
    <id>http://blog.leepeng.top/2017/11/21/ajax/</id>
    <published>2017-11-20T16:00:00.000Z</published>
    <updated>2018-08-17T13:59:07.580Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><h3 id="前端通信"><a href="#前端通信" class="headerlink" title="前端通信"></a>前端通信</h3><p>1、同源策略及限制</p><blockquote><p>源：协议(<a href="http://,https://)，域名" target="_blank" rel="noopener">http://,https://)，域名</a> (www.leepeng.top)，端口(:8080)<br>不是一个源的文档没有权利去操作另一个源的文档，包括Cookie/LocalStorage/IndexDB无法读取<br>DOM无法获取，Ajax请求不能发送<br>同源策略限制不同的源的文档之间进行交互</p></blockquote><p>2、前后端通信</p><blockquote><p>Ajax:同源限制<br>WebSocket:不受限制<br>CORS:支持同源，也支持非同源(新的通信协议标准)</p></blockquote><p>3、创建Ajax</p><blockquote><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>XMLHttpRequest对象的工作流程</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function ajax(opt)&#123;</span><br><span class="line">var xhr = XMLHttpRequest ? new XMLHttpRequest() : window.ActiveObject(&apos;Microsoft.XMLHTTP&apos;); //兼容6</span><br><span class="line">var data = opt.data || null;</span><br><span class="line">var url = opt.url || &apos;&apos;;</span><br><span class="line">var type = opt.type.toUpperCase() || &apos;GET&apos;; // .toUpperCase()把字符串转换为大写</span><br><span class="line">var success = opt.sucess || function() &#123;&#125;</span><br><span class="line">var dataArr = [];</span><br><span class="line">for(k in data)&#123;</span><br><span class="line">dataArr.push(k + &apos;=&apos; + data[k]);</span><br><span class="line">&#125;</span><br><span class="line">if(type === &apos;GET&apos;)&#123;</span><br><span class="line">url = url +&apos;?&apos; + dataArr.join(&apos;&amp;&apos;);</span><br><span class="line">xhr.open(type,url.reolace(/\?$/g,&apos;&apos;),true); //如果以？结尾，则将问号去掉</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">if(type === &apos;POST&apos;)&#123;</span><br><span class="line">xhr.open(type,url,true);</span><br><span class="line">xhr.setRequestHeader(&apos;content-type&apos;,&apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">xhr.send(dataArr.join(&apos;&amp;&apos;));</span><br><span class="line">&#125;</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">var res = null;</span><br><span class="line">if(xhr.readyState === 4) &#123;</span><br><span class="line">if (xhr.status === 200 || xhr.status === 304) &#123;</span><br><span class="line">// 304得用本地缓存</span><br><span class="line">res = xhr.responseText</span><br><span class="line">if (typeof res ==== &apos;string&apos;) &#123;</span><br><span class="line">                res = JSON.parse(res);</span><br><span class="line">            &#125;</span><br><span class="line">            success(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">ajax(&#123;</span><br><span class="line">type: &apos;GET&apos;,</span><br><span class="line">&quot;url&quot;:&quot;http://www.leepeng.top&quot;,</span><br><span class="line">&quot;data&quot;:&#123;</span><br><span class="line">&quot;id&quot;:123456,</span><br><span class="line">&quot;name&quot;:&quot;leepeng&quot;</span><br><span class="line">&#125;,</span><br><span class="line">success: function(res)&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、跨域通信</p><blockquote><p>JSONP<br>Hash (hash改变，页面不刷新，？后是search,改变时会刷新页面)<br>postMessage (新技术，html5的标准)<br>WebSocket<br>CORS (可以理解为支持跨域通信的变种Ajax。当你在浏览器中发送一个ajax跨域请求时，浏览器会在http头中加入一个origin。如果只是一个普通的ajax，则会被浏览器拦截)</p></blockquote><p>4.1 JSONP 只用于GET<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在www.aaa.com页面中</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function jsonp(json) &#123;</span><br><span class="line">    alert(json[&apos;name&apos;])</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://localhost/ajax/jsonp.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 在wwww.bbb.com 页面中</span><br><span class="line">jsonp(&#123;&apos;name&apos;:&apos;leepeng&apos;,&apos;age&apos;:28&#125;)</span><br></pre></td></tr></table></figure></p><p>4.2 jsonp 封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/* Object.prototype.toString.call(source) </span><br><span class="line">source为对象时返回[object Object]</span><br><span class="line">------为数组时返回[object Array]</span><br><span class="line">------为数字时返回[object Number]</span><br><span class="line">------为字符串时返回[object String]</span><br><span class="line">*/</span><br><span class="line">function isFunction(fn) &#123; //判断是不是函数Object.prototype.toString.call()</span><br><span class="line">return &apos;[object Function]&apos; === Object.prototype.toString.call(fn);</span><br><span class="line">&#125;;</span><br><span class="line">function createScript(url) &#123;</span><br><span class="line">let script = document.createElement(&apos;script&apos;);</span><br><span class="line">script.setAttribute(&apos;type&apos;,&apos;text/javascript&apos;);</span><br><span class="line">script.setAttribute(&apos;charset&apos;, &apos;utf-8&apos;);</span><br><span class="line">    script.setAttribute(&apos;src&apos;, url);</span><br><span class="line">console.log(script)</span><br><span class="line">    return script;</span><br><span class="line">&#125;</span><br><span class="line">// [function 在页面中注入js脚本]</span><br><span class="line">function jsonp(url, onsuccess, onerror) &#123;</span><br><span class="line">var callbackName;</span><br><span class="line">window[callback] = function() &#123;</span><br><span class="line">if(onsuccess &amp;&amp; isFunction(onsuccess)) &#123;</span><br><span class="line">onsuccess(arguments[0])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var script = createScript(url + &apos;?callback=&apos; + callbackName);</span><br><span class="line">script.onload = script.onreadystatechange = function () &#123;</span><br><span class="line">         if (!script.readyState || /loaded|complete/.test(script.readyState)) &#123;</span><br><span class="line">             script.onload = script.onreadystatechange = null;</span><br><span class="line">             // 移除该script的 DOM 对象</span><br><span class="line">             if (script.parentNode) &#123;</span><br><span class="line">                 script.parentNode.removeChild(script);</span><br><span class="line">             &#125;</span><br><span class="line">             // 删除函数或变量</span><br><span class="line">             window[callbackName] = null;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     script.onerror = function () &#123;</span><br><span class="line">         if (onerror &amp;&amp; util.isFunction(onerror)) &#123;</span><br><span class="line">             onerror();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">// 调用</span><br><span class="line">var url = &apos;http://localhost/ajax/jsonp.js&apos;</span><br><span class="line">jsonp(url, function onsuccess(res)&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;, function onerror(err)&#123;</span><br><span class="line">console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// jquery jsonp</span><br><span class="line">$.getJSON(&quot;http://www.aaa.com/jsonp.php?jsoncallback=callback&quot;, function(res) &#123;</span><br><span class="line">    var data = res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4.3 利用hash</p><blockquote><p>场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在A中伪代码如下：</span><br><span class="line">var B = document.getElementsByTagName(&apos;iframe&apos;);</span><br><span class="line">B.src = B.src + &apos;#&apos; + &apos;data&apos;;</span><br><span class="line">// 在B中的伪代码如下</span><br><span class="line">window.onhashchange = function () &#123;</span><br><span class="line">var data = window.location.hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>4.4 postMessage</p><blockquote><p>窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bwindow.postMessage(&apos;data&apos;, &apos;http://B.com&apos;);</span><br><span class="line">// 在窗口B中监听</span><br><span class="line">Awindow.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class="line">console.log(event.origin);</span><br><span class="line">console.log(event.source);</span><br><span class="line">console.log(event.data);</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure></p></blockquote><p>4.5 Websocket</p><blockquote><p>[参考资料] <a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var ws = new WebSocket(&apos;wss://echo.websocket.org&apos;);</span><br><span class="line">ws.onopen = function (evt) &#123;</span><br><span class="line">console.log(&apos;Connection open ...&apos;);</span><br><span class="line">ws.send(&apos;Hello WebSockets!&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = function (evt) &#123;</span><br><span class="line">console.log(&apos;Received Message: &apos;, evt.data);</span><br><span class="line">ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = function (evt) &#123;</span><br><span class="line">console.log(&apos;Connection closed.&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>4.6 CORS </p><blockquote><p>[参考资料] <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// url（必选），options（可选）</span><br><span class="line">fetch(&apos;/some/url/&apos;, &#123;</span><br><span class="line">method: &apos;get&apos;,</span><br><span class="line">&#125;).then(function (response) &#123;</span><br><span class="line"></span><br><span class="line">&#125;).catch(function (err) &#123;</span><br><span class="line">//出错了，等价于 then 的第二个参数，但这样更好用更直观</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>4.6.1 CORS-GET请求的参数传递<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 通过fetch获取百度的错误提示页面</span><br><span class="line">fetch(&apos;https://www.baidu.com/search/error.html?a=1&amp;b=2&apos;, &#123; // 在URL中写上传递的参数</span><br><span class="line">    method: &apos;GET&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    return res.text()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>4.6.2 POST请求参数的传递</p><blockquote><p>众所周知，POST请求的参数，一定不能放在URL中，这样做的目的是防止信息泄露。<br>在POST提交的过程中，一般是表单提交，可是，经过查询，发现默认的提交方式是：Content-Type:text/plain;charset=UTF-8，所以需要指定头信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 通过fetch获取百度的错误提示页面</span><br><span class="line">fetch(&apos;https://www.baidu.com/search/error.html&apos;, &#123;</span><br><span class="line">    method: &apos;POST&apos;,</span><br><span class="line">    headers: new Headers(&#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; // 指定提交方式为表单提交</span><br><span class="line">      // &apos;Accept&apos;: &apos;application/json&apos; // 通过头指定，获取的数据类型是JSON</span><br><span class="line">    &#125;),</span><br><span class="line">    body: new URLSearchParams([[&quot;foo&quot;, 1],[&quot;bar&quot;, 2]]).toString() // 这里是请求对象</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    return res.text() </span><br><span class="line">    // return res.json() // 返回一个Promise，可以解析成JSON 与headers中指定json数据类型对应</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>4.6.3 fetch封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将对象转成 a=1&amp;b=2的形式</span><br><span class="line"> * @param obj 对象</span><br><span class="line"> */</span><br><span class="line">function obj2String(obj, arr = [], idx = 0) &#123;</span><br><span class="line">  for (let item in obj) &#123;</span><br><span class="line">    arr[idx++] = [item, obj[item]]</span><br><span class="line">  &#125;</span><br><span class="line">  return new URLSearchParams(arr).toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 真正的请求</span><br><span class="line"> * @param url 请求地址</span><br><span class="line"> * @param options 请求参数</span><br><span class="line"> * @param method 请求方式</span><br><span class="line"> */</span><br><span class="line">function commonFetcdh(url, options, method = &apos;GET&apos;) &#123;</span><br><span class="line">  const searchStr = obj2String(options)</span><br><span class="line">  let initObj = &#123;&#125;</span><br><span class="line">  if (method === &apos;GET&apos;) &#123; // 如果是GET请求，拼接url</span><br><span class="line">    url += &apos;?&apos; + searchStr</span><br><span class="line">    initObj = &#123;</span><br><span class="line">      method: method,</span><br><span class="line">      credentials: &apos;include&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    initObj = &#123;</span><br><span class="line">      method: method,</span><br><span class="line">      credentials: &apos;include&apos;,</span><br><span class="line">      headers: new Headers(&#123;</span><br><span class="line">        &apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">      &#125;),</span><br><span class="line">      body: searchStr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fetch(url, initObj).then((res) =&gt; &#123;</span><br><span class="line">    return res.json()</span><br><span class="line">  &#125;).then((res) =&gt; &#123;</span><br><span class="line">    return res</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * GET请求</span><br><span class="line"> * @param url 请求地址</span><br><span class="line"> * @param options 请求参数</span><br><span class="line"> */</span><br><span class="line">function GET(url, options) &#123;</span><br><span class="line">  return commonFetcdh(url, options, &apos;GET&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * POST请求</span><br><span class="line"> * @param url 请求地址</span><br><span class="line"> * @param options 请求参数</span><br><span class="line"> */</span><br><span class="line">function POST(url, options) &#123;</span><br><span class="line">  return commonFetcdh(url, options, &apos;POST&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">GET(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br><span class="line">POST(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;h3 id=&quot;前端通信&quot;&gt;&lt;a href=&quot;#前端通信&quot; class=&quot;headerlink&quot; title=&quot;前端通信&quot;&gt;&lt;/a&gt;前端通信&lt;/h3&gt;&lt;p&gt;1、同源策略及限制&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;源：协议(&lt;a href=&quot;http://,https://)，域名&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://,https://)，域名&lt;/a&gt; (www.leepeng.top)，端口(:8080)&lt;br&gt;不是一个源的文档没有权利去操作另一个源的文档，包括Cookie/LocalStorage/IndexDB无法读取&lt;br&gt;DOM无法获取，Ajax请求不能发送&lt;br&gt;同源策略限制不同的源的文档之间进行交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、前后端通信&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ajax:同源限制&lt;br&gt;WebSocket:不受限制&lt;br&gt;CORS:支持同源，也支持非同源(新的通信协议标准)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、创建Ajax&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&lt;br&gt;XMLHttpRequest对象的工作流程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="-js -ajax -异步请求" scheme="http://blog.leepeng.top/tags/js-ajax-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>VUE-项目手动搭建</title>
    <link href="http://blog.leepeng.top/2017/10/05/vue-xiangmu/"/>
    <id>http://blog.leepeng.top/2017/10/05/vue-xiangmu/</id>
    <published>2017-10-04T16:00:00.000Z</published>
    <updated>2018-04-02T13:21:41.674Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><h3 id="vue-loader-webpack项目配置"><a href="#vue-loader-webpack项目配置" class="headerlink" title="vue-loader+webpack项目配置"></a>vue-loader+webpack项目配置</h3><p>1、新建项目文件夹(这里以vueToDo为项目文件夹),<br>在vueToDo文件夹下npm init:这个命令用于创建一个package.json<br>2、安装依赖包</p><blockquote><p>npm install webpack vue vue-loader css-loader vue-template-compiler –save</p><p>webpack:打包工具<br>vue-loader：vue-loader是一个webpack的loader；可以将vue文件转换为JS模块；<br>css-loader：css-loader使你能够使用类似@import和url（…）的方法实现require的功能<br>vue-template-compiler：可用于将Vue 2.0模板预编译为渲染函数</p></blockquote><p>3、在vueToDo文件夹下新建src文件夹，存放源代码新建app.vue 和 index.js<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./app&apos;</span><br><span class="line"></span><br><span class="line">const root = document.createElement(&apos;div&apos;)</span><br><span class="line">document.body.appendChild(root)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    render:(h)=&gt;h(App)</span><br><span class="line">&#125;).$mount(root)</span><br><span class="line">//vue2.0的写法 </span><br><span class="line">//render函数是渲染一个视图，然后提供给el挂载，如果没有render那页面什么都不会出来</span><br></pre></td></tr></table></figure><p>4、webpack.config.js配置</p><blockquote><p>url-loader:对未设置或者小于limit设置的图片进行转换，以base64的格式被img的src所使用；而对于大于limit byte的图片用file-loader进行解析<br>vue-loader: 可以将vue文件转换为JS模块<br>style-loade: 将css插入到页面的style标签<br>css-loader: 是处理css文件中的url()等<br>file-loader: 作用是移动文件，默认的filename 值是文件内容的md5和原始文件的扩展</p></blockquote><p>另外：</p><blockquote><p>less-loader: 是将.less文件编译成css 依赖于less包<br>sass-loader: 是将.sass文件编译成css 依赖于sass包<br>stylus-loader: 是将.styl文件编译成css 依赖于stylus包</p></blockquote><p>5、修改package.json文件，在scripts项添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.js&quot;, //调用此项目中的webpack,防止与全局webpack版本不一致</span><br><span class="line">    &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --mode development --config webpack.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6、webpack-dev-server的配置和使用</p><blockquote><p>npm install webpack-dev-server cross-env –save<br>webpack-dev-server 是一个小型的Node.js Express服务器,它使用webpack-dev-middleware来服务于webpack的包<br>cross-env 能跨平台地设置及使用环境变量</p><p>html-webpack-plugin 该插件的两个主要作用<br>1、为html文件中引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题<br>2、可以生成创建html入口文件，比如单页面可以生成一个html文件入口，配置N个html-webpack-plugin可以生成N个页面入口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js </span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const HTMLPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const isDev = process.env.NODE_ENV ===&apos;development&apos;</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">    target:&apos;web&apos;, //webpack编译目标是web平台</span><br><span class="line">    entry:path.join(__dirname,&apos;src/index.js&apos;), //入口文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;bundle.js&apos;, //指定打包文件名</span><br><span class="line">        path:path.join(__dirname,&apos;dist&apos;) //指定打包文件夹</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.vue$/,</span><br><span class="line">                loader:&apos;vue-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                use:[</span><br><span class="line">                    &apos;style-loader&apos;,</span><br><span class="line">                    &apos;css-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less/,</span><br><span class="line">                use:[</span><br><span class="line">                    &apos;style-loader&apos;,</span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &apos;less-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.styl/,</span><br><span class="line">                use:[</span><br><span class="line">                    &apos;style-loader&apos;,</span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &apos;stylus-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(gif|jpg|png|jpeg|svg)$/,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;url-loader&apos;, //</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            limit:1024, //</span><br><span class="line">                            name:&apos;[name].[ext]&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &apos;process.env&apos;:&#123; //根据process.env区分正式版本还是测试版本</span><br><span class="line">                NODE_ENV: isDev ? &apos;&quot;development&quot;&apos; : &apos;&quot;production&quot;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        new HTMLPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">//判断是正式环境，还是开发环境 </span><br><span class="line">//devServer</span><br><span class="line">if(isDev)&#123;</span><br><span class="line">    config.devtool = &apos;#cheap-module-eval-source-map&apos;</span><br><span class="line">    config.devServer=&#123;</span><br><span class="line">        port:8000,</span><br><span class="line">        host:&apos;0.0.0.0&apos;, //好处：可以通过公司的内网ip进行访问（如别的电脑或手机上访问）</span><br><span class="line">        overlay:&#123; //webpack进行编译过程中如果有任何的错误，都让它显示在网页上边，可以很快定位错误</span><br><span class="line">            errors:true</span><br><span class="line">        &#125;,</span><br><span class="line">        hot:true //热更新</span><br><span class="line">        //historyFallback:&#123;&#125;</span><br><span class="line">        //open: true //每次开启服务器时都会自动 打开浏览器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports=config</span><br></pre></td></tr></table></figure><p>7、npm install postcss-loader autoprefixer babel-loader babel-core –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//postcss.config.js</span><br><span class="line">const autoprefixer=require(&apos;autoprefixer&apos;)</span><br><span class="line">//优化css(需要加浏览器前缀的属性，如：-webkit-)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        autoprefixer()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// .babelrc文件</span><br><span class="line">需要 npm install babel-preset-env babel-plugin-transform-vue-jsx --save</span><br><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;env&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;:[</span><br><span class="line">        &quot;transform-vue-jsx&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//webpack.config.js 在rules:[]添加</span><br><span class="line">&#123;</span><br><span class="line">    test:/\.jsx$/,</span><br><span class="line">    loader:&apos;babel-loader&apos;</span><br><span class="line">&#125;</span><br><span class="line">以处理.jsx文件</span><br><span class="line"></span><br><span class="line">//css处理文件中添加</span><br><span class="line">&#123;</span><br><span class="line">    test:/\.styl/,</span><br><span class="line">    use:[</span><br><span class="line">        &apos;style-loader&apos;,</span><br><span class="line">        &apos;css-loader&apos;,</span><br><span class="line">        &#123;</span><br><span class="line">            loader:&apos;postcss-loader&apos;,</span><br><span class="line">            options:&#123;</span><br><span class="line">                sourceMap:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;stylus-loader&apos;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的环境开发环境配置</p><h3 id="webpack配置css单独分离打包"><a href="#webpack配置css单独分离打包" class="headerlink" title="webpack配置css单独分离打包"></a>webpack配置css单独分离打包</h3><p>1、css单独打包</p><blockquote><p>npm install extract-text-webpack-plugin@next –save<br>用@next将插件版本升级到webpack4支持的版本<br>使用extract-text-webpack-plugin插件，将样式文件单独打包，打包输出的文件由配置文件中的output属性指定。然后我们在入口HTML页面写个link标签引入这个打包后的样式文件。</p></blockquote><p>在webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//css 中跟据自己需求使用配置css编译，这里只留stylus</span><br><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const HTMLPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const ExtractPlugin = require(&apos;extract-text-webpack-plugin&apos;) //引入extract-text-webpack-plugin插件</span><br><span class="line"></span><br><span class="line">const isDev = process.env.NODE_ENV ===&apos;development&apos;</span><br><span class="line"></span><br><span class="line">const config= &#123;</span><br><span class="line">    target:&apos;web&apos;,</span><br><span class="line">    entry:path.join(__dirname,&apos;src/index.js&apos;), //入口文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;bundle.js&apos;, //指定打包文件名</span><br><span class="line">        path:path.join(__dirname,&apos;dist&apos;) //指定打包文件夹</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.vue$/,</span><br><span class="line">                loader:&apos;vue-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.jsx$/,</span><br><span class="line">                loader:&apos;babel-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(gif|jpg|png|jpeg|svg)$/,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;url-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            limit:1024,</span><br><span class="line">                            name:&apos;[name].[ext]&apos;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &apos;process.env&apos;:&#123;</span><br><span class="line">                NODE_ENV: isDev ? &apos;&quot;development&quot;&apos; : &apos;&quot;production&quot;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new HTMLPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">if(isDev)&#123;</span><br><span class="line">    //开发环境</span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">        test:/\.styl/,</span><br><span class="line">        use:[</span><br><span class="line">            &apos;style-loader&apos;,</span><br><span class="line">            &apos;css-loader&apos;,</span><br><span class="line">            &#123;</span><br><span class="line">                loader:&apos;postcss-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    sourceMap:true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &apos;stylus-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    config.devtool = &apos;#cheap-module-eval-source-map&apos;</span><br><span class="line">    config.devServer=&#123;</span><br><span class="line">        port:8000,</span><br><span class="line">        host:&apos;0.0.0.0&apos;, </span><br><span class="line">        overlay:&#123;</span><br><span class="line">            errors:true,</span><br><span class="line">        &#125;,</span><br><span class="line">        hot:true</span><br><span class="line">    &#125;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        new webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">module.exports=config</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;h3 id=&quot;vue-loader-webpack项目配置&quot;&gt;&lt;a href=&quot;#vue-loader-webpack项目配置&quot; class=&quot;headerlink&quot; title=&quot;vue-loader+webpack项目配置&quot;&gt;&lt;/a&gt;vue-loader+webpack项目配置&lt;/h3&gt;&lt;p&gt;1、新建项目文件夹(这里以vueToDo为项目文件夹),&lt;br&gt;在vueToDo文件夹下npm init:这个命令用于创建一个package.json&lt;br&gt;2、安装依赖包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install webpack vue vue-loader css-loader vue-template-compiler –save&lt;/p&gt;
&lt;p&gt;webpack:打包工具&lt;br&gt;vue-loader：vue-loader是一个webpack的loader；可以将vue文件转换为JS模块；&lt;br&gt;css-loader：css-loader使你能够使用类似@import和url（…）的方法实现require的功能&lt;br&gt;vue-template-compiler：可用于将Vue 2.0模板预编译为渲染函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、在vueToDo文件夹下新建src文件夹，存放源代码新建app.vue 和 index.js&lt;br&gt;
    
    </summary>
    
    
      <category term="-vue" scheme="http://blog.leepeng.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE-Axios</title>
    <link href="http://blog.leepeng.top/2017/10/02/vue-axios/"/>
    <id>http://blog.leepeng.top/2017/10/02/vue-axios/</id>
    <published>2017-10-01T16:00:00.000Z</published>
    <updated>2018-03-21T13:59:24.130Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//npm axios安装</span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">Vue.prototype.$http = axios</span><br><span class="line"></span><br><span class="line">//post</span><br><span class="line">this.$http.post(&apos;getList&apos;,&#123;&apos;user&apos;:123&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;,function(err)&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">//get</span><br><span class="line">this.$http.get(&apos;getList&apos;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;,function(err)&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue-进行后台数据模拟"><a href="#vue-进行后台数据模拟" class="headerlink" title="vue 进行后台数据模拟"></a>vue 进行后台数据模拟</h3><p>1、//npm json-server快速“伪造”后台接口<br>一般情况下，网站、APP的数据都需要等待接口人员开发完对应的接口才可以获取到，这样子的效率有点低。最好是我们可以自己模拟接口数据，进行页面的数据填充，打通所有关节，之后等接口开发好了，改下接口地址就好了。</p><blockquote><p>npm install json-server –save</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//在项目根目录下，新建一个 JSON 文件db.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;getBoardList&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;开放产品&quot;,</span><br><span class="line">&quot;description&quot;: &quot;开放产品是一款开放产品&quot;,</span><br><span class="line">&quot;id&quot;: &quot;car&quot;,</span><br><span class="line">&quot;toKey&quot;: &quot;analysis&quot;,</span><br><span class="line">&quot;saleout&quot;: false</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;品牌营销&quot;,</span><br><span class="line">&quot;description&quot;: &quot;品牌营销帮助你的产品更好地找到定位&quot;,</span><br><span class="line">&quot;id&quot;: &quot;earth&quot;,</span><br><span class="line">&quot;toKey&quot;: &quot;count&quot;,</span><br><span class="line">&quot;saleout&quot;: false</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;使命必达&quot;,</span><br><span class="line">&quot;description&quot;: &quot;使命必达快速迭代永远保持最前端的速度&quot;,</span><br><span class="line">&quot;id&quot;: &quot;loud&quot;,</span><br><span class="line">&quot;toKey&quot;: &quot;forecast&quot;,</span><br><span class="line">&quot;saleout&quot;: true</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot;: &quot;勇攀高峰&quot;,</span><br><span class="line">&quot;description&quot;: &quot;帮你勇闯高峰，到达事业的顶峰&quot;,</span><br><span class="line">&quot;id&quot;: &quot;hill&quot;,</span><br><span class="line">&quot;toKey&quot;: &quot;publish&quot;,</span><br><span class="line">&quot;saleout&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//在webpack.dev.conf.js文件中</span><br><span class="line">//在这行下 const portfinder = require(&apos;portfinder&apos;)</span><br><span class="line">//添加</span><br><span class="line">const axios = require(&apos;axios&apos;)</span><br><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line"></span><br><span class="line">const app = express()</span><br><span class="line">var appData = require(&apos;../db.json&apos;)//加载本地数据文件</span><br><span class="line">var getBoardList = appData.getBoardList //获取对应的本地数据 </span><br><span class="line">var apiRoutes = express.Router()  </span><br><span class="line">app.use(&apos;/api&apos;, apiRoutes) // 调用api</span><br><span class="line"></span><br><span class="line">找到devServer:</span><br><span class="line">添加 </span><br><span class="line">before(app) &#123;</span><br><span class="line">  app.post(&apos;/api/getBoardList&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      errno: 0,</span><br><span class="line">      data: getBoardList //数据</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//axios请求数据，代码如下</span><br><span class="line">this.$http.post(&apos;/api/getBoardList&apos;)</span><br><span class="line">.then(function(res)&#123;</span><br><span class="line">console.log(res.data.data);</span><br><span class="line">&#125;,function(err)&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;h3 id=&quot;Axios&quot;&gt;&lt;a href=&quot;#Axios&quot; class=&quot;headerlink&quot; title=&quot;Axios&quot;&gt;&lt;/a&gt;Axios&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//npm axios安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install axios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import axios from &amp;apos;axios&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.prototype.$http = axios&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.$http.post(&amp;apos;getList&amp;apos;,&amp;#123;&amp;apos;user&amp;apos;:123&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(function(data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,function(err)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.$http.get(&amp;apos;getList&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(function(data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,function(err)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;vue-进行后台数据模拟&quot;&gt;&lt;a href=&quot;#vue-进行后台数据模拟&quot; class=&quot;headerlink&quot; title=&quot;vue 进行后台数据模拟&quot;&gt;&lt;/a&gt;vue 进行后台数据模拟&lt;/h3&gt;&lt;p&gt;1、//npm json-server快速“伪造”后台接口&lt;br&gt;一般情况下，网站、APP的数据都需要等待接口人员开发完对应的接口才可以获取到，这样子的效率有点低。最好是我们可以自己模拟接口数据，进行页面的数据填充，打通所有关节，之后等接口开发好了，改下接口地址就好了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install json-server –save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//在项目根目录下，新建一个 JSON 文件db.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;getBoardList&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;title&amp;quot;: &amp;quot;开放产品&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;description&amp;quot;: &amp;quot;开放产品是一款开放产品&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;id&amp;quot;: &amp;quot;car&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;toKey&amp;quot;: &amp;quot;analysis&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;saleout&amp;quot;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;title&amp;quot;: &amp;quot;品牌营销&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;description&amp;quot;: &amp;quot;品牌营销帮助你的产品更好地找到定位&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;id&amp;quot;: &amp;quot;earth&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;toKey&amp;quot;: &amp;quot;count&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;saleout&amp;quot;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;title&amp;quot;: &amp;quot;使命必达&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;description&amp;quot;: &amp;quot;使命必达快速迭代永远保持最前端的速度&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;id&amp;quot;: &amp;quot;loud&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;toKey&amp;quot;: &amp;quot;forecast&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;saleout&amp;quot;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;title&amp;quot;: &amp;quot;勇攀高峰&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;description&amp;quot;: &amp;quot;帮你勇闯高峰，到达事业的顶峰&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;id&amp;quot;: &amp;quot;hill&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;toKey&amp;quot;: &amp;quot;publish&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;quot;saleout&amp;quot;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="-vue -axios" scheme="http://blog.leepeng.top/tags/vue-axios/"/>
    
  </entry>
  
  <entry>
    <title>页面布局</title>
    <link href="http://blog.leepeng.top/2017/09/06/yemianbuju/"/>
    <id>http://blog.leepeng.top/2017/09/06/yemianbuju/</id>
    <published>2017-09-05T16:00:00.000Z</published>
    <updated>2018-04-26T10:27:09.089Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><p>页面布局的方法<br>一、float：具有局限性，优缺点：<br>    1.脱离文档流<br>    2.兼容性好<br>    3.要清除浮动<br>二、绝对定位：position:absolute;优缺点：<br>    1.脱离文档流<br>    2.快捷，方便<br>三、flexbox布局<br>felxbox布局是css3里新出的一个，它就是为了解决上述两种方式的不足出现的，是比较完美的一个。目前移动端的布局也都是用flexbox。<br>felxbox的缺点就是不能兼容IE8及以下浏览器。<br>四、表格布局<br>表格布局在历史上遭到很多人的摒弃，说表格布局麻烦，操作比较繁琐，其实这是一种误解，在很多场景中，表格布局还是很适用的，比如这个三栏布局，用表格布局就轻易写出来了。还有表格布局的兼容性很好，在flex布局不兼容的时候，可以尝试表格布局。<br>表格布局也是有缺陷的，当其中一个单元格高度超出的时候，两侧的单元格也是会跟着一起变高的，而有时候这种效果不是我们想要的。<br>五、网格布局<br>网格布局也是新出的一种布局方式，兼容性是一个缺点。<br><img src="/images/yemianbuju.png" class="full-image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/*共用样式*/</span><br><span class="line">*&#123;margin:0;padding:0;&#125;</span><br><span class="line">section&#123;margin-bottom: 15px;&#125;</span><br><span class="line">.layout,.layout article div&#123;min-height:100px;&#125;</span><br><span class="line">.layout article .left,.layout article .right&#123;width: 300px;background: #333;&#125;</span><br><span class="line">.layout article .center&#123;background:#999;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p&gt;float-浮动布局&lt;/p&gt;</span><br><span class="line">&lt;section class=&quot;layout float&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.layout.float .left&#123;float: left;&#125;</span><br><span class="line">.layout.float .right&#123;float: right;&#125;</span><br><span class="line">.layout.float .center&#123; margin:0 300px 0 300px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;article class=&quot;content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-float&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;绝对定位布局&lt;/p&gt;</span><br><span class="line">&lt;section class=&quot;layout absolute&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.layout.absolute .content&gt;div&#123;position: absolute;&#125;</span><br><span class="line">.layout.absolute .left&#123;left:0;&#125;</span><br><span class="line">.layout.absolute .center&#123;left:300px;right:300px;&#125;</span><br><span class="line">.layout.absolute .right&#123;right:0;&#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line">&lt;article class=&quot;content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;两侧固定，中间自适应-absolite&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;flexbox布局&lt;/p&gt;</span><br><span class="line">&lt;section class=&quot;layout flexbox&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.flexbox .content&#123;display: flex;&#125;</span><br><span class="line">.flexbox .left&#123;&#125;</span><br><span class="line">.flexbox .center&#123;flex:1;&#125;</span><br><span class="line">.flexbox .right&#123;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;article class=&quot;content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;flexbox&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;table-cell布局&lt;/p&gt;</span><br><span class="line">&lt;section class=&quot;layout table&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.layout.table .centent&#123;display:table;width:100%;&#125;</span><br><span class="line">.layout.table .centent&gt;div&#123;display: table-cell;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;article class=&quot;centent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;p&gt;table&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;网格布局&lt;/p&gt;</span><br><span class="line">&lt;section class=&quot;layout grid&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.layout.grid .centent&#123;</span><br><span class="line">display: grid;</span><br><span class="line">width:100%;</span><br><span class="line">grid-template-rows: 100px;</span><br><span class="line">grid-template-columns: 300px auto 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;article class=&quot;centent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;p&gt;grid&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;p&gt;页面布局的方法&lt;br&gt;一、float：具有局限性，优缺点：&lt;br&gt;    1.脱离文档流&lt;br&gt;    2.兼容性好&lt;br&gt;    3.要清除浮动&lt;br&gt;二、绝对定位：position:absolute;优缺点：&lt;br&gt;    1.脱离文档流&lt;br&gt;    2.快捷，方便&lt;br&gt;三、flexbox布局&lt;br&gt;felxbox布局是css3里新出的一个，它就是为了解决上述两种方式的不足出现的，是比较完美的一个。目前移动端的布局也都是用flexbox。&lt;br&gt;felxbox的缺点就是不能兼容IE8及以下浏览器。&lt;br&gt;四、表格布局&lt;br&gt;表格布局在历史上遭到很多人的摒弃，说表格布局麻烦，操作比较繁琐，其实这是一种误解，在很多场景中，表格布局还是很适用的，比如这个三栏布局，用表格布局就轻易写出来了。还有表格布局的兼容性很好，在flex布局不兼容的时候，可以尝试表格布局。&lt;br&gt;表格布局也是有缺陷的，当其中一个单元格高度超出的时候，两侧的单元格也是会跟着一起变高的，而有时候这种效果不是我们想要的。&lt;br&gt;五、网格布局&lt;br&gt;网格布局也是新出的一种布局方式，兼容性是一个缺点。&lt;br&gt;&lt;img src=&quot;/images/yemianbuju.png&quot; class=&quot;full-image&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*共用样式*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&amp;#123;margin:0;padding:0;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section&amp;#123;margin-bottom: 15px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout,.layout article div&amp;#123;min-height:100px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout article .left,.layout article .right&amp;#123;width: 300px;background: #333;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout article .center&amp;#123;background:#999;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;float-浮动布局&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;section class=&amp;quot;layout float&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout.float .left&amp;#123;float: left;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout.float .right&amp;#123;float: right;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.layout.float .center&amp;#123; margin:0 300px 0 300px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;article class=&amp;quot;content&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;h3&amp;gt;两侧固定，中间自适应-float&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="-css -页面布局" scheme="http://blog.leepeng.top/tags/css-%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>js-filter()/findIndex()/find()</title>
    <link href="http://blog.leepeng.top/2017/08/21/js-find-findIndex-filter/"/>
    <id>http://blog.leepeng.top/2017/08/21/js-find-findIndex-filter/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2018-04-19T14:01:33.131Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><h3 id="filter-用于把Array的某些元素过滤掉，然后返回剩下的元素。"><a href="#filter-用于把Array的某些元素过滤掉，然后返回剩下的元素。" class="headerlink" title="filter()用于把Array的某些元素过滤掉，然后返回剩下的元素。"></a>filter()用于把Array的某些元素过滤掉，然后返回剩下的元素。</h3><blockquote><p>filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：</span><br><span class="line">var arr = [1, 2, 4, 5, 6, 9, 10, 15];</span><br><span class="line">var r = arr.filter(function (x) &#123;</span><br><span class="line">    return x % 2 !== 0;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(r) // [1, 5, 9, 15]</span><br><span class="line"></span><br><span class="line">把一个Array中的空字符串删掉，可以这么写：</span><br><span class="line">var arr = [&apos;A&apos;, &apos;&apos;, &apos;B&apos;, null, undefined, &apos;C&apos;, &apos;  &apos;];</span><br><span class="line">var r = arr.filter(function (s) &#123;</span><br><span class="line">    return s &amp;&amp; s.trim(); // 注意：IE9以下的版本没有trim()方法</span><br><span class="line">&#125;);</span><br><span class="line">console.log(r) // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br></pre></td></tr></table></figure></p><p>filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</span><br><span class="line">var r = arr.filter(function (element, index, self) &#123;</span><br><span class="line">    console.log(element); // 依次打印&apos;A&apos;, &apos;B&apos;, &apos;C&apos;</span><br><span class="line">    console.log(index); // 依次打印0, 1, 2</span><br><span class="line">    console.log(self); // self就是变量arr</span><br><span class="line">    return true;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>利用filter，可以巧妙地去除Array的重复元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var</span><br><span class="line">    r,</span><br><span class="line">    arr = [&apos;apple&apos;, &apos;strawberry&apos;, &apos;banana&apos;, &apos;pear&apos;, &apos;apple&apos;, &apos;orange&apos;, &apos;orange&apos;, &apos;strawberry&apos;];</span><br><span class="line">r = arr.filter(function (element, index, self) &#123;</span><br><span class="line">    return self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(r.toString());//apple,strawberry,banana,pear,orange</span><br><span class="line">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="findIndex-value-index-arr"><a href="#findIndex-value-index-arr" class="headerlink" title="findIndex(value, index, arr)"></a>findIndex(value, index, arr)</h3><blockquote><p>返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 5, 10, 15].findIndex(function(value, index, arr) &#123;  </span><br><span class="line">return value &gt; 9;  </span><br><span class="line">&#125;) // 2</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="find-value-index-arr"><a href="#find-value-index-arr" class="headerlink" title="find(value, index, arr)"></a>find(value, index, arr)</h3><blockquote><p>用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。<br>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, -5, 10].find((n) =&gt; n &lt; 0)  </span><br><span class="line">// -5  </span><br><span class="line">[1, 5, 10, 15].find(function(value, index, arr) &#123;  </span><br><span class="line">return value &gt; 9;  </span><br><span class="line">&#125;) // 10</span><br></pre></td></tr></table></figure></p><p>findIndex()/find()这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[NaN].indexOf(NaN)  </span><br><span class="line">// -1  </span><br><span class="line">[NaN].findIndex(y =&gt; Object.is(NaN, y))  </span><br><span class="line">// 0</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;h3 id=&quot;filter-用于把Arra
      
    
    </summary>
    
    
      <category term="-js -find -findIndex -filter" scheme="http://blog.leepeng.top/tags/js-find-findIndex-filter/"/>
    
  </entry>
  
  <entry>
    <title>倒计时效果</title>
    <link href="http://blog.leepeng.top/2017/06/17/countdown/"/>
    <id>http://blog.leepeng.top/2017/06/17/countdown/</id>
    <published>2017-06-16T16:00:00.000Z</published>
    <updated>2018-04-26T10:33:21.833Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/time.jpg" class="full-image"></p><p>当前时间</p><p><div id="time"></div><br>倒计时1</p><p><div class="dao1">距离设置时间还有<span id="dao1"></span>天</div><br>倒计时2 </p><p><div class="dao2">距离设置时间2019/1/1,00:00:00还有<span id="dao2"></span></div></p><script>    window.onload= function () {        showtime();        dao1();        dao2();    }    function formatTime(i){        if(i<10){            i='0'+i;        }        return i;    }    //当前时间    function showtime(){        let myDate = new Date();        let year = myDate.getFullYear();//年        let month = myDate.getMonth();//月        let date = myDate.getDate();//日        let day = myDate.getDay();//星期        let h = myDate.getHours();//时        let m = myDate.getMinutes();//分        let s = myDate.getSeconds();//秒            m = formatTime(m);            s = formatTime(s);        let time=document.getElementById("time");        let weekday = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六','']            time.innerHTML=year+'年'+(month+1)+'月'+date+'日 '+weekday[day]+' '+h+':'+m+':'+s;        setTimeout(showtime,500);    }    //当前时间    //倒计时1    function dao1(){        let curtime = new Date();        let endtime = new Date("2019,1,1");        let time = endtime.getTime() - curtime.getTime();//getTime()毫秒        //1000 * 60 * 60 * 24一天的秒数        //利用Math.ceil()对象方法，对得出的时间差进行向上取整。        //parseInt()取整。        daytime = parseInt(time/(1000 * 60 * 60 * 24))        if(daytime > 0 ){          document.getElementById('dao1').innerHTML = daytime;        }    }    //倒计时1    //倒计时2    function dao2(){        let nowtime = new Date();        let endtime = new Date("2019/1/1,00:00:00");        let time = parseInt((endtime.getTime() - nowtime.getTime())/1000);//秒        let d = parseInt(time/(24*60*60));        let h = parseInt(time/(60*60)%24);        let m = parseInt(time/60%60);        let s = parseInt(time%60);            m = formatTime(m);            s = formatTime(s);        document.getElementById('dao2').innerHTML = d+'天'+h+'时'+m+'分'+s+'秒';        setTimeout(dao2,500)    }</script><blockquote><p>代码</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;当前时间&lt;/p&gt;</span><br><span class="line">&lt;div id=<span class="string">"time"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;倒计时1&lt;/p&gt;</span><br><span class="line">&lt;div class=<span class="string">"dao1"</span>&gt;距离设置时间还有&lt;span id=<span class="string">"dao1"</span>&gt;&lt;/span&gt;天&lt;/div&gt;</span><br><span class="line">&lt;p&gt;倒计时2&lt;/p&gt;</span><br><span class="line">&lt;div class=<span class="string">"dao2"</span>&gt;距离设置时间2019/1/1,00:00:00还有&lt;span id=<span class="string">"dao2"</span>&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.onload= <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">showtime();</span><br><span class="line">dao1();</span><br><span class="line">dao2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> formatTime(i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;10)&#123;</span><br><span class="line">i=<span class="string">'0'</span>+i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">//当前时间</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showtime</span></span>()&#123;</span><br><span class="line"><span class="built_in">let</span> myDate = new Date();</span><br><span class="line"><span class="built_in">let</span> year = myDate.getFullYear();//年</span><br><span class="line"><span class="built_in">let</span> month = myDate.getMonth();//月</span><br><span class="line"><span class="built_in">let</span> date = myDate.getDate();//日</span><br><span class="line"><span class="built_in">let</span> day = myDate.getDay();//星期</span><br><span class="line"><span class="built_in">let</span> h = myDate.getHours();//时</span><br><span class="line"><span class="built_in">let</span> m = myDate.getMinutes();//分</span><br><span class="line"><span class="built_in">let</span> s = myDate.getSeconds();//秒</span><br><span class="line">m = formatTime(m);</span><br><span class="line">s = formatTime(s);</span><br><span class="line"><span class="built_in">let</span> time=document.getElementById(<span class="string">"time"</span>);</span><br><span class="line"><span class="built_in">let</span> weekday = [<span class="string">'星期日'</span>,<span class="string">'星期一'</span>,<span class="string">'星期二'</span>,<span class="string">'星期三'</span>,<span class="string">'星期四'</span>,<span class="string">'星期五'</span>,<span class="string">'星期六'</span>,<span class="string">''</span>]</span><br><span class="line">time.innerHTML=year+<span class="string">'年'</span>+month+<span class="string">'月'</span>+date+<span class="string">'日 '</span>+weekday[day]+<span class="string">' '</span>+h+<span class="string">':'</span>+m+<span class="string">':'</span>+s;</span><br><span class="line">setTimeout(showtime,500);</span><br><span class="line">&#125;</span><br><span class="line">//当前时间</span><br><span class="line">//倒计时1</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">dao1</span></span>()&#123;</span><br><span class="line"><span class="built_in">let</span> curtime = new Date();</span><br><span class="line"><span class="built_in">let</span> endtime = new Date(<span class="string">"2019,1,1"</span>);</span><br><span class="line"><span class="built_in">let</span> time = endtime.getTime() - curtime.getTime();//getTime()毫秒</span><br><span class="line">//1000 * 60 * 60 * 24一天的秒数</span><br><span class="line">//利用Math.ceil()对象方法，对得出的时间差进行向上取整。</span><br><span class="line">//parseInt()取整。</span><br><span class="line">daytime = parseInt(time/(1000 * 60 * 60 * 24))</span><br><span class="line"><span class="keyword">if</span>(daytime &gt; 0 )&#123;</span><br><span class="line">      document.getElementById(<span class="string">'dao1'</span>).innerHTML = daytime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//倒计时1</span><br><span class="line">//倒计时2</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">dao2</span></span>()&#123;</span><br><span class="line"><span class="built_in">let</span> nowtime = new Date();</span><br><span class="line"><span class="built_in">let</span> endtime = new Date(<span class="string">"2019/1/1,00:00:00"</span>);</span><br><span class="line"><span class="built_in">let</span> time = parseInt((endtime.getTime() - nowtime.getTime())/1000);//秒</span><br><span class="line"><span class="built_in">let</span> d = parseInt(time/(24*60*60));</span><br><span class="line"><span class="built_in">let</span> h = parseInt(time/(60*60)%24);</span><br><span class="line"><span class="built_in">let</span> m = parseInt(time/60%60);</span><br><span class="line"><span class="built_in">let</span> s = parseInt(time%60);</span><br><span class="line">m = formatTime(m);</span><br><span class="line">s = formatTime(s);</span><br><span class="line">document.getElementById(<span class="string">'dao2'</span>).innerHTML = d+<span class="string">'天'</span>+h+<span class="string">'时'</span>+m+<span class="string">'分'</span>+s+<span class="string">'秒'</span>;</span><br><span class="line">setTimeout(dao2,500)</span><br><span class="line">&#125;</span><br><span class="line">//倒计时2</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/time.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前时间&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;time&quot;&gt;&lt;/div&gt;&lt;br&gt;倒计时1&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;dao1&quot;&gt;距离设置时间还有&lt;span id=&quot;dao1&quot;&gt;&lt;/span&gt;天&lt;/div&gt;&lt;br&gt;倒计时2 &lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;dao2&quot;&gt;距离设置时间2019/1/1,00:00:00还有&lt;span id=&quot;dao2&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script&gt;
    window.onload= function () {
        showtime();
        dao1();
        dao2();
    }
    function formatTime(i){
        if(i&lt;10){
            i=&#39;0&#39;+i;
        }
        return i;
    }
    //当前时间
    function showtime(){
        let myDate = new Date();
        let year = myDate.getFullYear();//年
        let month = myDate.getMonth();//月
        let date = myDate.getDate();//日
        let day = myDate.getDay();//星期
        let h = myDate.getHours();//时
        let m = myDate.getMinutes();//分
        let s = myDate.getSeconds();//秒
            m = formatTime(m);
            s = formatTime(s);
        let time=document.getElementById(&quot;time&quot;);
        let weekday = [&#39;星期日&#39;,&#39;星期一&#39;,&#39;星期二&#39;,&#39;星期三&#39;,&#39;星期四&#39;,&#39;星期五&#39;,&#39;星期六&#39;,&#39;&#39;]
            time.innerHTML=year+&#39;年&#39;+(month+1)+&#39;月&#39;+date+&#39;日 &#39;+weekday[day]+&#39; &#39;+h+&#39;:&#39;+m+&#39;:&#39;+s;
        setTimeout(showtime,500);
    }
    //当前时间
    //倒计时1
    function dao1(){
        let curtime = new Date();
        let endtime = new Date(&quot;2019,1,1&quot;);
        let time = endtime.getTime() - curtime.getTime();//getTime()毫秒
        //1000 * 60 * 60 * 24一天的秒数
        //利用Math.ceil()对象方法，对得出的时间差进行向上取整。
        //parseInt()取整。
        daytime = parseInt(time/(1000 * 60 * 60 * 24))
        if(daytime &gt; 0 ){
          document.getElementById(&#39;dao1&#39;).innerHTML = daytime;
        }
    }
    //倒计时1
    //倒计时2
    function dao2(){
        let nowtime = new Date();
        let endtime = new Date(&quot;2019/1/1,00:00:00&quot;);
        let time = parseInt((endtime.getTime() - nowtime.getTime())/1000);//秒
        let d = parseInt(time/(24*60*60));
        let h = parseInt(time/(60*60)%24);
        let m = parseInt(time/60%60);
        let s = parseInt(time%60);
            m = formatTime(m);
            s = formatTime(s);
        document.getElementById(&#39;dao2&#39;).innerHTML = d+&#39;天&#39;+h+&#39;时&#39;+m+&#39;分&#39;+s+&#39;秒&#39;;
        setTimeout(dao2,500)
    }


&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.leepeng.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化项目构建</title>
    <link href="http://blog.leepeng.top/2017/06/03/qianduanzidonghua/"/>
    <id>http://blog.leepeng.top/2017/06/03/qianduanzidonghua/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2018-03-12T10:48:52.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端自动化项目构建"><a href="#前端自动化项目构建" class="headerlink" title="前端自动化项目构建"></a>前端自动化项目构建</h3><p>这里的编译环境是 gulp + webpack + node + express + express-generator<br>1、gulp就是解决自动化构建，增强工作流程的一个工具<br>2、webpack 用来将各种文件（js，css，图片之类）进行打包的工具<br>3、express nodejs 的 web 服务器<br>4、express-generator nodejs 的 web 服务器的初始化工具<br>备注：不一定要使用这种方式来实现自动刷新环境搭建，这个只是其中一个举例。</p><h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><blockquote><p>node 安装不详细说了，官网上下载就是了(win.msi/macOS.pkg)。npm会随它一起安装。<br><a href="https://nodejs.org//zh-cn/download" target="_blank" rel="noopener">https://nodejs.org//zh-cn/download</a></p></blockquote><p>1、新建项目目录project<br>2、在项目文件夹下创建app、server、tasks<br>3、目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app // 这是放置前端代码目录</span><br><span class="line">├── css //放置css文件</span><br><span class="line">├── js //放置js文件</span><br><span class="line">|├──index.js //初始化一个入口文件</span><br><span class="line">|├──class</span><br><span class="line">||└──test.js</span><br><span class="line">|── views //放置html文件</span><br><span class="line">|├──error.ejs //初始化错误模板</span><br><span class="line">|└──index.ejs //初始化入口模板</span><br><span class="line">server // 服务器</span><br><span class="line">tasks //构建工具目录</span><br></pre></td></tr></table></figure><p>4、进入server文件夹，执行 express -e .<br>    它会创建一些文件夹和文件并提示你去安装依赖关系，<br>    执行npm install<br>5、安装完成后进入到构建目录tasks创建文件夹util并新建文件args.js</p><blockquote><p>通过使用 yargs 这个模块来处理命令行的参数，主要是方便处理命令行参数的捕获和过滤。<br><a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noopener">官方地址</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasks //构建工具目录</span><br><span class="line">├──args.js //初始化一个入口文件</span><br></pre></td></tr></table></figure><a id="more"></a><p>6、进入项目根目录project后，初始化项目目录的 npm 环境<br>    执行npm init 会自动创建package.json文件，它是安装依赖包必须的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (project) //项目名称-可不填会有默认</span><br><span class="line">version: (1.0.0) 1.0.1 //版本-可不填会有默认</span><br><span class="line">description: //可不填直接回车</span><br><span class="line">entry point: (index.js)//可不填直接回车</span><br><span class="line">test command://可不填直接回车</span><br><span class="line">git repository://可不填直接回车</span><br><span class="line">keywords://可不填直接回车</span><br><span class="line">author://可不填直接回车</span><br><span class="line">license: (ISC)//可不填直接回车</span><br><span class="line">About to write to E:\project\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;project&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.1&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) y</span><br></pre></td></tr></table></figure><p>7、创建.babelrc文件</p><blockquote><p>babel的配置文件，这里需要配置 presets，是为了编译 es6语法的。<br>win7以上的系统已经提供了一种命名方法:   我们只需在重命名时写   .babelrc.{注意开头和结尾一共有两个点}<br>这里需要装个包：npm install babel-preset-es2015 –save-dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;presets&quot;:[&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、创建gulpfile.babel.js文件</p><blockquote><p>gulpfile.babel.js //es6语法用这个文件，固定的；不加.babel会有报错<br>gulpfile.js是 gulp 的默认配置文件</p></blockquote><p>9、打开第5步创建的args.js文件，编辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import yargs from &apos;yargs&apos;;</span><br><span class="line">const args = yargs</span><br><span class="line">    .option(&apos;production&apos;, &#123;</span><br><span class="line">        boolean: true,</span><br><span class="line">        default: false,</span><br><span class="line">        describe: &apos;min all scripts&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .option(&apos;watch&apos;, &#123; // watch 参数</span><br><span class="line">        boolean: true,</span><br><span class="line">        default: false,</span><br><span class="line">        describe: &apos;watch all files&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .option(&apos;verbose&apos;, &#123;</span><br><span class="line">        boolean: true,</span><br><span class="line">        default: false,</span><br><span class="line">        describe: &apos;log&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .option(&apos;sourcemaps&apos;, &#123;</span><br><span class="line">        describe: &apos;force the creation of sroucemaps&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .option(&apos;port&apos;, &#123;</span><br><span class="line">        string: true,</span><br><span class="line">        default: 8080,</span><br><span class="line">        describe: &apos;server port&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .argv // 会返回对象，里面有之前配置的参数</span><br><span class="line"></span><br><span class="line">export default args;</span><br></pre></td></tr></table></figure></p><p>10、在tasks文件夹下创建构建脚本script.js,对js做处理（构建脚本一定要放在tasks文件夹下）</p><blockquote><p>回到根目录下安装这些引用的包：npm install gulp gulp-if gulp-concat webpack webpack-stream vinyl-named gulp-livereload gulp-plumber gulp-rename gulp-uglify gulp-util yargs –save-dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpif from &apos;gulp-if&apos;;//gulp 语句中作if判断</span><br><span class="line">import concat from &apos;gulp-concat&apos;;//gulp 中处理文件拼接</span><br><span class="line">import webpack from &apos;webpack&apos;;//打包工具</span><br><span class="line">import gulpWebpack from &apos;webpack-stream&apos;;// webpack使用时需要附带上</span><br><span class="line">import named from &apos;vinyl-named&apos;;//对文件重命名，作标记</span><br><span class="line">import livereload from &apos;gulp-livereload&apos;;//热更新，自动刷新</span><br><span class="line">import plumber from &apos;gulp-plumber&apos;;//处理文件信息流,防止来自 gulp 插件错误导致中断操作的插件</span><br><span class="line">import rename from &apos;gulp-rename&apos;;//对文件重命名</span><br><span class="line">import uglify from &apos;gulp-uglify&apos;;//处理压缩js/css</span><br><span class="line">import &#123;log,colors&#125; from &apos;gulp-util&apos;;//在命令行输出的包 (色彩、log)</span><br><span class="line">import args from &apos;./util/args&apos;;//对命令行参数进行解析的包</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;scripts&apos;,()=&gt;&#123;//gulp创建一个名为script的任务</span><br><span class="line">return gulp.src([&apos;app/js/index.js&apos;])</span><br><span class="line">.pipe(plumber(&#123; // 将错误通过errorHandle输出</span><br><span class="line">errorHandle:function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;))</span><br><span class="line">.pipe(named())//vinyl-named用来保持输入和输出的文件名相同, 否则会自动生成一个hash.</span><br><span class="line">.pipe(gulpWebpack(&#123;// 使用 webpack 对 js 文件通过 babel 进行转义</span><br><span class="line">module:&#123;// 这是 webpack 的调用模块写法</span><br><span class="line">loaders:[&#123;</span><br><span class="line">test:/\.js$/,</span><br><span class="line">loader:&apos;babel-loader&apos;// 使用 babel loader,这是个包需要安装</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;),null,(err,stats)=&gt;&#123;</span><br><span class="line">log(`Finished &apos;$&#123;colors.cyan(&apos;scripts&apos;)&#125;&apos;`,stats.toString(&#123;</span><br><span class="line">chunks:false</span><br><span class="line">&#125;))</span><br><span class="line">&#125;)</span><br><span class="line">.pipe(gulp.dest(&apos;server/public/js&apos;))// 输出处理后的 js 文件</span><br><span class="line">.pipe(rename(&#123;// 重命名，这里是对 js 文件压缩后的文件命名</span><br><span class="line">basename:&apos;cp&apos;,</span><br><span class="line">extname:&apos;.min.js&apos;</span><br><span class="line">&#125;))</span><br><span class="line">.pipe(uglify(&#123;compress:&#123;properties:false&#125;,output:&#123;&apos;quote_keys&apos;:true&#125;&#125;)) // 压缩文件</span><br><span class="line">.pipe(gulp.dest(&apos;server/public/js&apos;))// 重新输出处理后的 js 文件</span><br><span class="line">.pipe(gulpif(args.watch,livereload()))// watch 监听文件并自动刷新</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>11、创建处理模板的构建脚本，在tasks文件夹下创建构建脚本pages.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpif from &apos;gulp-if&apos;;//gulp 语句中作if判断</span><br><span class="line">import livereload from &apos;gulp-livereload&apos;;//热更新，自动刷新</span><br><span class="line">import args from &apos;./util/args&apos;;//对命令行参数进行解析的包</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;pages&apos;,()=&gt;&#123;</span><br><span class="line">return gulp.src(&apos;app/**/*.ejs&apos;)</span><br><span class="line">.pipe(gulp.dest(&apos;server&apos;))</span><br><span class="line">.pipe(gulpif(args.watch,livereload()))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>12、服务器相关脚本,在tasks文件夹下创建构建脚本server.js</p><blockquote><p>这里引入了一个新的包，npm install gulp-live-server –save -dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpif from &apos;gulp-if&apos;;//gulp 语句中作if判断</span><br><span class="line">import liveserver from &apos;gulp-live-server&apos; //起动作为服务器的包</span><br><span class="line">import args from &apos;./util/args&apos;;//对命令行参数进行解析的包</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;serve&apos;,(cb)=&gt;&#123;</span><br><span class="line">if(!args.watch) return cb();</span><br><span class="line"></span><br><span class="line">var server = liveserver.new([&apos;--harmony&apos;,&apos;server/bin/www&apos;]);</span><br><span class="line">server.start();</span><br><span class="line"></span><br><span class="line">gulp.watch([&apos;server/public/**/*.js&apos;,&apos;server/views/**/*.ejs&apos;],function(file)&#123;</span><br><span class="line">server.notify.apply(server,[file]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.watch([&apos;server/routes/**/*.js&apos;,&apos;server/app.js&apos;],function () &#123;</span><br><span class="line">server.start.bind(server)()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>13、在tasks文件夹下创建构建脚本css.js</p><blockquote><p>负责处理 css 文件编译的，这里并没有做更多的 css 编译处理，css 编译通常有 less，sass等，需要借助不同的插件来处理，不过这里只是直接输出，所以不作介绍。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpif from &apos;gulp-if&apos;;//gulp 语句中作if判断</span><br><span class="line">import livereload from &apos;gulp-livereload&apos;;//热更新，自动刷新</span><br><span class="line">import args from &apos;./util/args&apos;;//对命令行参数进行解析的包</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;css&apos;,()=&gt;&#123;</span><br><span class="line">  return gulp.src(&apos;app/**/*.css&apos;) // 将源文件复制到目标目录</span><br><span class="line">    .pipe(gulp.dest(&apos;server/public&apos;))</span><br><span class="line">    .pipe(gulpif(args.watch,livereload()))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>14、在tasks文件夹下创建构建脚本browser.js</p><blockquote><p>这个文件主要就是负责监听源代码的变化，然后将变化的内容分别通知不同的任务进行处理，这是真正的实现文件监听的任务。<br>这里引入了一个新的包，npm install gulp-util–save-dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpif from &apos;gulp-if&apos;;//gulp 语句中作if判断</span><br><span class="line">import gutil from &apos;gulp-util&apos;;</span><br><span class="line">import args from &apos;./util/args&apos;;//对命令行参数进行解析的包</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;browser&apos;,(cb)=&gt;&#123;</span><br><span class="line">if(!args.watch) return cb();</span><br><span class="line">// 监听 js 文件变化</span><br><span class="line">gulp.watch(&apos;app/**/*.js&apos;,[&apos;scripts&apos;]);</span><br><span class="line">// 监听 ejs 文件变化 </span><br><span class="line">gulp.watch(&apos;app/**/*.ejs&apos;,[&apos;pages&apos;]);</span><br><span class="line">// 监听 css 文件变化</span><br><span class="line">gulp.watch(&apos;app/**/*.css&apos;,[&apos;css&apos;]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>15、每次编译都需要清空原来的文件。所以在tasks文件夹下创建构建脚本clean.js</p><blockquote><p>这里引入了一个新的包，npm install del –save-dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;</span><br><span class="line">import del from &apos;del&apos;;</span><br><span class="line">// 如果在这个任务里面没有命令行参数的话，也可以不导入</span><br><span class="line">import args from &apos;./util/args&apos;; </span><br><span class="line">gulp.task(&apos;clean&apos;,()=&gt;&#123; // 使用 es6语法做函数写法</span><br><span class="line">  return del([&apos;server/public&apos;,&apos;server/views&apos;]) // 清空2个目录的文件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>16、同样在tasks文件夹下创建构建脚本build.js</p><blockquote><p>这里就是真的 build 脚本任务文件了，<br>这里使用了一个特殊包gulp-sequence，负责安排脚本执行的顺序的。<br>npm install gulp-sequence –save-dev</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">import gulpSequence from &apos;gulp-sequence&apos;;// 处理包的顺序问题</span><br><span class="line">// 用中括号的意思是任务是平行的，不存在先后</span><br><span class="line">gulp.task(&apos;build&apos;,gulpSequence(&apos;clean&apos;,&apos;css&apos;,&apos;pages&apos;,&apos;scripts&apos;,[&apos;browser&apos;,&apos;serve&apos;]))</span><br></pre></td></tr></table></figure><p>17、default.js</p><blockquote><p>这是 gulp的默认的，首先执行的任务脚本文件，从这里出发，扩散到其他任务脚本。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;//引入gulp 自动化构建工具</span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;build&apos;]);</span><br></pre></td></tr></table></figure><p>这个时这时如果运行gulp，会提示错误，因为上面涉及到几个包没有安装</p><blockquote><p>npm install babel-loader babel-core babel-preset-env –save-dev</p></blockquote><p>别忘记gulpfile.babel.js里没写东西呢</p><blockquote><p>又引入了新的包：npm install require-dir  –save-dev<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import requireDir from &apos;require-dir&apos;;</span><br><span class="line"></span><br><span class="line">requireDir(&apos;./tasks&apos;);</span><br></pre></td></tr></table></figure></p></blockquote><p>可以尽情的去跑起来了。。。<br>还差最后两个地方<br>1、记得不你的模板里还是空的app/views/index.ejs 记得加上HTML内容<br>2、server/app.js<br>    又一个新包，接收热更新：npm install connect-livereload –save-dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line">app.use(require(&apos;connect-livereload&apos;)());//新加的能接收热更新的包一定要放在上一行的下面</span><br></pre></td></tr></table></figure><blockquote><p>至此终于完了，学于幕课网<br>gulp –watch<br>浏览器打开：localhost:3000</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前端自动化项目构建&quot;&gt;&lt;a href=&quot;#前端自动化项目构建&quot; class=&quot;headerlink&quot; title=&quot;前端自动化项目构建&quot;&gt;&lt;/a&gt;前端自动化项目构建&lt;/h3&gt;&lt;p&gt;这里的编译环境是 gulp + webpack + node + express + express-generator&lt;br&gt;1、gulp就是解决自动化构建，增强工作流程的一个工具&lt;br&gt;2、webpack 用来将各种文件（js，css，图片之类）进行打包的工具&lt;br&gt;3、express nodejs 的 web 服务器&lt;br&gt;4、express-generator nodejs 的 web 服务器的初始化工具&lt;br&gt;备注：不一定要使用这种方式来实现自动刷新环境搭建，这个只是其中一个举例。&lt;/p&gt;
&lt;h4 id=&quot;开始构建&quot;&gt;&lt;a href=&quot;#开始构建&quot; class=&quot;headerlink&quot; title=&quot;开始构建&quot;&gt;&lt;/a&gt;开始构建&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;node 安装不详细说了，官网上下载就是了(win.msi/macOS.pkg)。npm会随它一起安装。&lt;br&gt;&lt;a href=&quot;https://nodejs.org//zh-cn/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org//zh-cn/download&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、新建项目目录project&lt;br&gt;2、在项目文件夹下创建app、server、tasks&lt;br&gt;3、目录结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app // 这是放置前端代码目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── css //放置css文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── js //放置js文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	├──index.js //初始化一个入口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	├──class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|	└──test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|── views //放置html文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	├──error.ejs //初始化错误模板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	└──index.ejs //初始化入口模板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server // 服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tasks //构建工具目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4、进入server文件夹，执行 express -e .&lt;br&gt;    它会创建一些文件夹和文件并提示你去安装依赖关系，&lt;br&gt;    执行npm install&lt;br&gt;5、安装完成后进入到构建目录tasks创建文件夹util并新建文件args.js&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过使用 yargs 这个模块来处理命令行的参数，主要是方便处理命令行参数的捕获和过滤。&lt;br&gt;&lt;a href=&quot;https://www.npmjs.com/package/yargs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tasks //构建工具目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├──args.js //初始化一个入口文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端自动化项目构建" scheme="http://blog.leepeng.top/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6-解构赋值</title>
    <link href="http://blog.leepeng.top/2017/05/08/jiegoufuzhi/"/>
    <id>http://blog.leepeng.top/2017/05/08/jiegoufuzhi/</id>
    <published>2017-05-07T16:00:00.000Z</published>
    <updated>2018-02-19T05:35:52.943Z</updated>
    
    <content type="html"><![CDATA[<!-- Welcome to LeePeng's [blog](www.leepeng.top/)!  --><!-- <img src="/images/about-bg.jpg" class="full-image"> --><p>解构赋值语法是一个 Javascript 表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。<br>说的很抽象，看代码吧<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">//数组</span><br><span class="line">&#123;</span><br><span class="line">let a,b,rest;</span><br><span class="line">[a,b]=[1,2];</span><br><span class="line">console.log(a,b);//1,2</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let a,b,rest;</span><br><span class="line">[a,b,...rest]=[1,2,3,4,5,6]</span><br><span class="line">console.log(a,b,rest);//1,2,[3,4,5,6]</span><br><span class="line">&#125;</span><br><span class="line">//对象</span><br><span class="line">&#123;</span><br><span class="line">let a,b;</span><br><span class="line">(&#123;a,b&#125;=&#123;a:1,b:2&#125;);</span><br><span class="line">console.log(a,b);//1,2</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let a,b,c,rest;</span><br><span class="line">[a,b,c=3]=[1,2];</span><br><span class="line">console.log(a,b,c);//1,2,3</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let a,b,c,rest;</span><br><span class="line">[a:A,b]=[1,2];</span><br><span class="line">console.log(A,b,a);//1,2,undefined //a被重命名为A,a就是相当于键名</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let a,b,c,rest;</span><br><span class="line">[a,b,c]=[1,2];</span><br><span class="line">console.log(a,b,c);//1,2,undefined</span><br><span class="line">&#125;</span><br><span class="line">//应用场景</span><br><span class="line">&#123;</span><br><span class="line">//变量的交换</span><br><span class="line">let a=1;</span><br><span class="line">let b=2;</span><br><span class="line">[a,b]=[b,a];</span><br><span class="line">console.log(a,b);//2,1</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">function f() &#123;</span><br><span class="line">return [1,2]</span><br><span class="line">&#125;</span><br><span class="line">let a,b;</span><br><span class="line">[a,b]=f();</span><br><span class="line">console.log(a,b);//1,2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">function f() &#123;</span><br><span class="line">return [1,2,3,4,5];</span><br><span class="line">&#125;</span><br><span class="line">let a,b,c;</span><br><span class="line">[a,,,b]=f();</span><br><span class="line">console.log(a,b);//1,4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">function f() &#123;</span><br><span class="line">return [1,2,3,4,5];</span><br><span class="line">&#125;</span><br><span class="line">let a,b,c;</span><br><span class="line">[a,,...b]=f();</span><br><span class="line">console.log(a,b);//1,[3,4,5]</span><br><span class="line">c=f();</span><br><span class="line">console.log(c);//[1,2,3,4,5]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">let o=&#123;p:42,q:true&#125;;</span><br><span class="line">let &#123;p,q&#125;=o;</span><br><span class="line">console.log(o[&apos;p&apos;]+&quot;,&quot;+o[&quot;q&quot;])</span><br><span class="line">console.log(p,q);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let &#123;a=10,b=5&#125;=&#123;a:3&#125;;</span><br><span class="line">console.log(a,b);//3,5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">let metaData=&#123;</span><br><span class="line">title:&apos;abc&apos;,</span><br><span class="line">test:[&#123;</span><br><span class="line">title:&apos;test&apos;,</span><br><span class="line">desc:&apos;descripttion&apos;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">let &#123;title:esTitle,test:[&#123;title:cnTitle&#125;]&#125;=metaData;</span><br><span class="line">console.log(esTitle,cnTitle);//abc,test</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">//解构数据</span><br><span class="line">let res = &#123;</span><br><span class="line">status:200,</span><br><span class="line">id:12,</span><br><span class="line">data:[&#123;name:&apos;bob&apos;&#125;,&#123;name:&apos;lee&apos;&#125;]</span><br><span class="line">&#125;</span><br><span class="line">let &#123;statue,id,data&#125;= res;</span><br><span class="line">if(statue == 200)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">//解构方法</span><br><span class="line">let &#123;floor,pow&#125;=Math;</span><br><span class="line">let a = 1.1;</span><br><span class="line">console.log(floor(a))//1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">let arr = [1,2]//传参有顺序问题</span><br><span class="line">function test1([a,b])&#123;</span><br><span class="line">console.log(&quot;a:&quot;,a);</span><br><span class="line">console.log(&quot;b:&quot;,b);</span><br><span class="line">&#125;</span><br><span class="line">test1(arr);</span><br><span class="line"></span><br><span class="line">let obj = &#123;b:2,a:1&#125;//传参可不受顺序限制</span><br><span class="line">function test(&#123;a=10,b&#125;)&#123;</span><br><span class="line">console.log(&quot;a:&quot;,a);</span><br><span class="line">console.log(&quot;b:&quot;,b);</span><br><span class="line">&#125;</span><br><span class="line">test(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- Welcome to LeePeng&#39;s [blog](www.leepeng.top/)!  --&gt;
&lt;!-- &lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt; --&gt;
&lt;p&gt;解构赋值语法是一个 Javascript 表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。&lt;br&gt;说的很抽象，看代码吧&lt;br&gt;
    
    </summary>
    
    
      <category term="-js -解构赋值" scheme="http://blog.leepeng.top/tags/js-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的方法</title>
    <link href="http://blog.leepeng.top/2017/05/06/qingchufudong/"/>
    <id>http://blog.leepeng.top/2017/05/06/qingchufudong/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2018-02-17T06:34:55.983Z</updated>
    
    <content type="html"><![CDATA[<p>1、结尾处加空div标签 clear:both;<br>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度<br>优点：简单、代码少、浏览器支持好、不容易出现怪问题<br>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不好<br>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法 </p><p>2、父级div定义 伪类:after 和 zoom<br>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题<br>优点：浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）<br>缺点：代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持。<br>建议：推荐使用，建议定义公共类，以减少CSS代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*清除浮动*/</span><br><span class="line">.clearfix:before,.clearfix:after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: table;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、父级div定义 overflow:hidden<br>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度<br>优点：简单、代码少、浏览器支持好<br>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。<br>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。<br>4、父级div定义 display:flow-root;<br>很遗憾，只有最火狐53+，chrome58+，opera45+，才支持。不过未来，应该都会支持吧。<br>我们也可以用@supports(display:flow-root){}来进行优雅降级处理。<br>或者用@@supports not (display:flow-root){}来进行渐进增强处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、结尾处加空div标签 clear:both;&lt;br&gt;原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度&lt;br&gt;优点：简单、代码少、浏览器支持好、不容易出现怪问题&lt;br&gt;缺点：不少初学者不理解原理；如果页面浮动布局多，就要增
      
    
    </summary>
    
    
      <category term="-css -clear" scheme="http://blog.leepeng.top/tags/css-clear/"/>
    
  </entry>
  
  <entry>
    <title>ES6-set-map</title>
    <link href="http://blog.leepeng.top/2017/05/05/es6-set-map/"/>
    <id>http://blog.leepeng.top/2017/05/05/es6-set-map/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2018-01-21T14:20:18.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。开发中用于去除重复数据<br>Set 本身是一个构造函数，用来生成 Set 数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const s = new Set();</span><br><span class="line">[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));</span><br><span class="line">for (let i of s) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// 2 3 5 4</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Set 方法 </p></blockquote><p>1、新建new Set([‘…’])<br>2、获取个数.size<br>3、添加add、删除delete、是否包含has、清除clear<br>4、keys和values都是相等的<br>5、类似于数组没有重复的元素（唯一的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let s=new Set([1,2,3,3]);</span><br><span class="line">console.log(&quot;arr:&quot;,arr) // 返回1,2,3 去除重复数据</span><br><span class="line">s.add(4).add(4) // 注意4被加入了两次</span><br><span class="line">s.delete(2)</span><br><span class="line">console.log(&quot;s:&quot;,s.has(4)) // true</span><br><span class="line">console.log(&quot;s:&quot;,s.keys())</span><br><span class="line">console.log(&quot;s:&quot;,s.values())</span><br><span class="line">s.clear()</span><br></pre></td></tr></table></figure><p>下面是一个对比，看看在判断是否包括一个键上面，Object结构和Set结构的写法不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 对象的写法</span><br><span class="line">const properties = &#123;</span><br><span class="line">  &apos;width&apos;: 1,</span><br><span class="line">  &apos;height&apos;: 1</span><br><span class="line">&#125;;</span><br><span class="line">if (properties[someName]) &#123;</span><br><span class="line">  // do something</span><br><span class="line">&#125;</span><br><span class="line">// Set的写法</span><br><span class="line">const properties = new Set();</span><br><span class="line">properties.add(&apos;width&apos;);</span><br><span class="line">properties.add(&apos;height&apos;);</span><br><span class="line">if (properties.has(someName)) &#123;</span><br><span class="line">  // do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.from方法可以将 Set 结构转为数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const items = new Set([1, 2, 3, 4, 5]);</span><br><span class="line">const array = Array.from(items);</span><br></pre></td></tr></table></figure><p>这就提供了去除数组重复成员的另一种方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function dedupe(array) &#123;</span><br><span class="line">  return Array.from(new Set(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dedupe([1, 1, 2, 3]) // [1, 2, 3]</span><br></pre></td></tr></table></figure><blockquote><p>遍历操作</p></blockquote><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。<br>    keys()：返回键名的遍历器<br>    values()：返回键值的遍历器<br>    entries()：返回键值对的遍历器<br>    forEach()：使用回调函数遍历每个成员</p><p>keys方法、values方法、entries方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let set = new Set([&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;]);</span><br><span class="line"></span><br><span class="line">for (let item of set.keys()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"></span><br><span class="line">for (let item of set.values()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"></span><br><span class="line">for (let item of set.entries()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="line">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="line">// [&quot;blue&quot;, &quot;blue&quot;]</span><br></pre></td></tr></table></figure><p>直接用for…of循环遍历 Set。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let set = new Set([&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;]);</span><br><span class="line">for (let x of set) &#123;</span><br><span class="line">  console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br></pre></td></tr></table></figure><p>forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set = new Set([1, 4, 9]);</span><br><span class="line">set.forEach((value, key) =&gt; console.log(key + &apos; : &apos; + value))</span><br><span class="line">// 1 : 1</span><br><span class="line">// 4 : 4</span><br><span class="line">// 9 : 9</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。<br>1、新建new Map([])<br>2、 size:属性返回 Map 结构的成员总数<br>    set(key, value):添加一个新建元素到映射。<br>    get(key):返回映射中的指定元素。<br>    has(key):如果映射包含指定元素，则返回 true。<br>    delete(key):从映射中移除指定的元素。<br>    clear:从映射中移除所有元素。<br>    forEach:对映射中的每个元素执行指定操作。<br>    toString:返回映射的字符串表示形式。<br>    valueOf:返回指定对象的原始值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const map = new Map([</span><br><span class="line">    [&apos;name&apos;,&apos;leepeng&apos;],</span><br><span class="line">    [&apos;age&apos;,24],</span><br><span class="line">    [&apos;sex&apos;,&apos;男&apos;],</span><br><span class="line">    [obj1,&apos;sfsfdsfe&apos;],</span><br><span class="line">    [obj2,&apos;lihfksdnsiu&apos;],</span><br><span class="line">    [[1,2,3],&apos;haha&apos;]</span><br><span class="line">])</span><br><span class="line">map.set(&apos;friends&apos;,[&apos;ffff&apos;,&apos;gggg&apos;])</span><br><span class="line">console.log(map.size)</span><br><span class="line">console.log(map)</span><br><span class="line">console.log(map.get(&apos;name&apos;))</span><br><span class="line">console.log(map.delete(&apos;name&apos;))</span><br><span class="line">console.log(map.has(&apos;age&apos;))</span><br><span class="line">//map.clear();</span><br><span class="line">console.log(map)</span><br><span class="line">map.forEach(function (value,index) &#123;</span><br><span class="line">    console.log(index+&apos;:&apos;+value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>遍历方法</p></blockquote><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。<br>keys()：返回键名的遍历器。<br>values()：返回键值的遍历器。<br>entries()：返回所有成员的遍历器。<br>forEach()：遍历 Map 的所有成员。<br>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const map = new Map([</span><br><span class="line">  [&apos;F&apos;, &apos;no&apos;],</span><br><span class="line">  [&apos;T&apos;,  &apos;yes&apos;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">for (let key of map.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot;</span><br><span class="line">// &quot;T&quot;</span><br><span class="line"></span><br><span class="line">for (let value of map.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;no&quot;</span><br><span class="line">// &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">for (let item of map.entries()) &#123;</span><br><span class="line">  console.log(item[0], item[1]);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">for (let [key, value] of map.entries()) &#123;</span><br><span class="line">  console.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">// 等同于使用map.entries()</span><br><span class="line">for (let [key, value] of map) &#123;</span><br><span class="line">  console.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;F&quot; &quot;no&quot;</span><br><span class="line">// &quot;T&quot; &quot;yes&quot;</span><br></pre></td></tr></table></figure><p>Map 还有一个forEach方法，与数组的forEach方法类似，也可以实现遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">map.forEach(function(value, key, map) &#123;</span><br><span class="line">  console.log(&quot;Key: %s, Value: %s&quot;, key, value);</span><br><span class="line">&#125;);</span><br><span class="line">forEach方法还可以接受第二个参数，用来绑定this。</span><br><span class="line"></span><br><span class="line">const reporter = &#123;</span><br><span class="line">  report: function(key, value) &#123;</span><br><span class="line">    console.log(&quot;Key: %s, Value: %s&quot;, key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map.forEach(function(value, key, map) &#123;</span><br><span class="line">  this.report(key, value);</span><br><span class="line">&#125;, reporter);</span><br></pre></td></tr></table></figure></p><p>上面代码中，forEach方法的回调函数的this，就指向reporter。</p><blockquote><p>与其他数据结构的互相转换</p></blockquote><p>（1）Map 转为数组<br>前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（…）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const myMap = new Map()</span><br><span class="line">  .set(true, 7)</span><br><span class="line">  .set(&#123;foo: 3&#125;, [&apos;abc&apos;]);</span><br><span class="line">[...myMap]</span><br><span class="line">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &apos;abc&apos; ] ] ]</span><br></pre></td></tr></table></figure></p><p>（2）数组 转为 Map<br>将数组传入 Map 构造函数，就可以转为 Map。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Map([</span><br><span class="line">  [true, 7],</span><br><span class="line">  [&#123;foo: 3&#125;, [&apos;abc&apos;]]</span><br><span class="line">])</span><br><span class="line">// Map &#123;</span><br><span class="line">//   true =&gt; 7,</span><br><span class="line">//   Object &#123;foo: 3&#125; =&gt; [&apos;abc&apos;]</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure></p><p>（3）Map 转为对象<br>如果所有 Map 的键都是字符串，它可以转为对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function strMapToObj(strMap) &#123;</span><br><span class="line">  let obj = Object.create(null);</span><br><span class="line">  for (let [k,v] of strMap) &#123;</span><br><span class="line">    obj[k] = v;</span><br><span class="line">  &#125;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myMap = new Map()</span><br><span class="line">  .set(&apos;yes&apos;, true)</span><br><span class="line">  .set(&apos;no&apos;, false);</span><br><span class="line">strMapToObj(myMap)</span><br><span class="line">// &#123; yes: true, no: false &#125;</span><br></pre></td></tr></table></figure></p><p>（4）对象转为 Map<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function objToStrMap(obj) &#123;</span><br><span class="line">  let strMap = new Map();</span><br><span class="line">  for (let k of Object.keys(obj)) &#123;</span><br><span class="line">    strMap.set(k, obj[k]);</span><br><span class="line">  &#125;</span><br><span class="line">  return strMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objToStrMap(&#123;yes: true, no: false&#125;)</span><br><span class="line">// Map &#123;&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false&#125;</span><br></pre></td></tr></table></figure></p><p>（5）Map 转为 JSON<br>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function strMapToJson(strMap) &#123;</span><br><span class="line">  return JSON.stringify(strMapToObj(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myMap = new Map().set(&apos;yes&apos;, true).set(&apos;no&apos;, false);</span><br><span class="line">strMapToJson(myMap)</span><br><span class="line">// &apos;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function mapToArrayJson(map) &#123;</span><br><span class="line">  return JSON.stringify([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myMap = new Map().set(true, 7).set(&#123;foo: 3&#125;, [&apos;abc&apos;]);</span><br><span class="line">mapToArrayJson(myMap)</span><br><span class="line">// &apos;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&apos;</span><br></pre></td></tr></table></figure></p><p>（6）JSON 转为 Map<br>JSON 转为 Map，正常情况下，所有键名都是字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function jsonToStrMap(jsonStr) &#123;</span><br><span class="line">  return objToStrMap(JSON.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToStrMap(&apos;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&apos;)</span><br><span class="line">// Map &#123;&apos;yes&apos; =&gt; true, &apos;no&apos; =&gt; false&#125;</span><br></pre></td></tr></table></figure></p><p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是数组转为 JSON 的逆操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function jsonToMap(jsonStr) &#123;</span><br><span class="line">  return new Map(JSON.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToMap(&apos;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&apos;)</span><br><span class="line">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&apos;abc&apos;]&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h3&gt;&lt;p&gt;ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。开发中用于去除重复数据&lt;br&gt;Set 本身是一个构造函数，用来生成 Set 数据结构。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const s = new Set();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 3, 5, 4, 5, 2, 2].forEach(x =&amp;gt; s.add(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (let i of s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 2 3 5 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.leepeng.top/tags/js/"/>
    
      <category term="es6" scheme="http://blog.leepeng.top/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-let,const</title>
    <link href="http://blog.leepeng.top/2017/05/04/es6-lensson1/"/>
    <id>http://blog.leepeng.top/2017/05/04/es6-lensson1/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2018-01-21T14:20:01.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>1、let命令， 用来声明变量。 它的用法类似于var， 但是所声明的变量， 只在let命令所在的代码块内有效。<br>2、变量一定要在声明后使用， 否则报错。<br>3、使用let命令声明变量之前， 该变量都是不可用的。<br>4、变量x使用let命令声明， 所以在声明之前， 都属于x的“死区”， 只要用到该变量就会报错。 因此， typeof运行时就会抛出一个ReferenceError。<br>5、let不允许在相同作用域内， 重复声明同一个变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">let a = 10;</span><br><span class="line">var b = 1;</span><br><span class="line">&#125; </span><br><span class="line">console.log(a) // ReferenceError: a is not defined.</span><br><span class="line">console.log(b) // 1</span><br></pre></td></tr></table></figure></p><p>for循环的计数器，很适合使用let<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(let i =0;i&lt; arr.length;i++ )&#123;&#125;</span><br><span class="line">console.log(i) // ReferenceError: a is not defined.</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p>1、const声明一个只读的常量。 一旦声明， 常量的值就不能改变。（ eg 1 ）<br>2、const声明的变量不得改变值， 这意味着， const一旦声明变量， 就必须立即初始化， 不能留到以后赋值。<br>3、const的作用域与let命令相同： 只在声明所在的块级作用域内有效。<br>4、const命令声明的常量也是不提升， 同样存在暂时性死区， 只能在声明的位置后面使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const PI = 3.1415;</span><br><span class="line">PI // 3.1415</span><br><span class="line">PI = 3;</span><br></pre></td></tr></table></figure></p><p>// TypeError: Assignment to constant variable.<br>对于复合类型的变量， 变量名不指向数据， 而是指向数据所在的地址。const命令只是保证变量名指向的地址不变， 并不保证该地址的数据不变， 所以将一个对象声明为常量必须非常小心。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const foo = &#123;&#125;;</span><br><span class="line">foo.prop = 123;</span><br><span class="line">foo.prop</span><br><span class="line">// 123</span><br><span class="line">foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only</span><br></pre></td></tr></table></figure></p><p>上面代码中， 常量foo储存的是一个地址， 这个地址指向一个对象。 不可变的只是这个地址， 即不能把foo指向另一个地址， 但对象本身是可变的， 所以依然可以为其添加新属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;let命令&quot;&gt;&lt;a href=&quot;#let命令&quot; class=&quot;headerlink&quot; title=&quot;let命令&quot;&gt;&lt;/a&gt;let命令&lt;/h3&gt;&lt;p&gt;1、let命令， 用来声明变量。 它的用法类似于var， 但是所声明的变量， 只在let命令所在的代码块内有效。&lt;br&gt;2、变量一定要在声明后使用， 否则报错。&lt;br&gt;3、使用let命令声明变量之前， 该变量都是不可用的。&lt;br&gt;4、变量x使用let命令声明， 所以在声明之前， 都属于x的“死区”， 只要用到该变量就会报错。 因此， typeof运行时就会抛出一个ReferenceError。&lt;br&gt;5、let不允许在相同作用域内， 重复声明同一个变量。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let a = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	var b = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(a) // ReferenceError: a is not defined.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(b) // 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;for循环的计数器，很适合使用let&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for(let i =0;i&amp;lt; arr.length;i++ )&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(i) // ReferenceError: a is not defined.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.leepeng.top/tags/js/"/>
    
      <category term="es6" scheme="http://blog.leepeng.top/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>屏蔽双击选中文字的方法!</title>
    <link href="http://blog.leepeng.top/2017/05/02/pingbishuangjixuanzhongzi/"/>
    <id>http://blog.leepeng.top/2017/05/02/pingbishuangjixuanzhongzi/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2018-04-26T10:30:41.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="屏蔽双击选中文字的方法"><a href="#屏蔽双击选中文字的方法" class="headerlink" title="屏蔽双击选中文字的方法!"></a>屏蔽双击选中文字的方法!</h3><p><img src="/images/pingbi.jpg" class="full-image"></p><p>onselectstart=”return false”（直接加在需要作用的标签）</p><p>eg:  &lt;div class=”test” onselectstart=”return false” style=”-moz-user-select:none;” &gt;你选不到我。。。（屏蔽双击选中文字的区域）&lt;/div&gt;</p><p>如果你在标签里加了onselectstart=”return false” 那标签内的文字都没法选中了。。</p><h3 id="css禁止双击页面选中文本"><a href="#css禁止双击页面选中文本" class="headerlink" title="css禁止双击页面选中文本"></a>css禁止双击页面选中文本</h3><a id="more"></a><p>user-select：none | text | all | element<br>默认值：text<br>适用于：除替换元素外的所有元素<br>继承性：无<br>动画性：否<br>计算值：指定值<br>取值：<br>none：文本不能被选择<br>text：可以选择文本<br>all：当所有内容作为一个整体时可以被选择。如果双击或者在上下文上点击子元素，那么被选择的部分将是以该子元素向上回溯的最高祖先元素。<br>element：可以选择文本，但选择范围受元素边界的约束</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;屏蔽双击选中文字的方法&quot;&gt;&lt;a href=&quot;#屏蔽双击选中文字的方法&quot; class=&quot;headerlink&quot; title=&quot;屏蔽双击选中文字的方法!&quot;&gt;&lt;/a&gt;屏蔽双击选中文字的方法!&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/pingbi.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;p&gt;onselectstart=”return false”（直接加在需要作用的标签）&lt;/p&gt;
&lt;p&gt;eg:  &amp;lt;div class=”test” onselectstart=”return false” style=”-moz-user-select:none;” &amp;gt;你选不到我。。。（屏蔽双击选中文字的区域）&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;如果你在标签里加了onselectstart=”return false” 那标签内的文字都没法选中了。。&lt;/p&gt;
&lt;h3 id=&quot;css禁止双击页面选中文本&quot;&gt;&lt;a href=&quot;#css禁止双击页面选中文本&quot; class=&quot;headerlink&quot; title=&quot;css禁止双击页面选中文本&quot;&gt;&lt;/a&gt;css禁止双击页面选中文本&lt;/h3&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.leepeng.top/tags/js/"/>
    
      <category term="css" scheme="http://blog.leepeng.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框</title>
    <link href="http://blog.leepeng.top/2017/05/02/bootstrap-addiframe-close-modal/"/>
    <id>http://blog.leepeng.top/2017/05/02/bootstrap-addiframe-close-modal/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2018-01-21T10:08:36.673Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/bootstrap.jpg" class="full-image"></p><p>bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框<br>window.parent.$(‘#myModal’).modal(‘hide’);<br><a id="more"></a><br>eg:<br>window.self<br>功能：是对当前窗口自身的引用。它和window属性是等价的。<br>语法：window.self<br>注：window、self、window.self是等价的。</p><p>window.top<br>功能：返回顶层窗口，即浏览器窗口。<br>语法：window.top<br>注：如果窗口本身就是顶层窗口，top属性返回的是对自身的引用。</p><p>window.parent<br>功能：返回父窗口。<br>语法：window.parent<br>注：如果窗口本身是顶层窗口，parent属性返回的是对自身的引用。<br>在框架网页中，一般父窗口就是顶层窗口，但如果框架中还有框架，父窗口和顶层窗口就不一定相同了。</p><p>判断当前窗口是否在一个框架中：</p><p>&lt; script type=”text/JavaScript” &gt;<br>var b = window.top!=window.self;<br>document.write( “当前窗口是否在一个框架中：”+b );<br>&lt; /script &gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/bootstrap.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;p&gt;bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框&lt;br&gt;window.parent.$(‘#myModal’).modal(‘hide’);&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.leepeng.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>老是忘记的小问题!</title>
    <link href="http://blog.leepeng.top/2017/05/02/wangjidexiaowenti/"/>
    <id>http://blog.leepeng.top/2017/05/02/wangjidexiaowenti/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2018-01-21T10:00:37.445Z</updated>
    
    <content type="html"><![CDATA[<p>1、火狐FF里INPUT标签刷新页面后 仍然保存之前输入的内容。</p><p>直接在input 标签里 增加 autocomplete=”off”。火狐默认为 on。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、火狐FF里INPUT标签刷新页面后 仍然保存之前输入的内容。&lt;/p&gt;
&lt;p&gt;直接在input 标签里 增加 autocomplete=”off”。火狐默认为 on。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="html" scheme="http://blog.leepeng.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>HTML-&amp;#65279导致页面顶部空白一行</title>
    <link href="http://blog.leepeng.top/2017/04/20/html-kongbai/"/>
    <id>http://blog.leepeng.top/2017/04/20/html-kongbai/</id>
    <published>2017-04-19T16:00:00.000Z</published>
    <updated>2018-04-26T10:31:07.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTML-&amp;#65279导致页面顶部空白一行</p></blockquote><p>静态html页面，在浏览器中测试的时候，发现其中一个html页面的顶部多出了些许空白，而另一个页面显示正常。在浏览器中进行了审查对比，发现有空白的那个页面的head标签里面的元素全部跑到了body里面，而且body中还多出了一个，当把这个东西删除之后就正常了。然后又在编辑器中，对比了一下这两个页面的源码，发现head部分完全一样，body中的代码也没有什么异常。最后通过查阅相关资料，才发现原来是编码的问题。<br>页面的编码如果是UTF-8 + BOM，会在body开头处加入一个可见的控制符，导致页面头部会出现一个空白。这种编码方式一般会在windows操作系统中出现，比如记事本编辑器，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM）。它是一串隐藏的字符，用于让记事本等编辑器识别这个文件是否以UTF-8编码。对于一般的文件，这样并不会产生什么麻烦。但对于html来说，BOM是个大麻烦。因为浏览器在解析html页面时，并不会忽略BOM，所以在解析html文件时，会把BOM作为该文件开头正文的一部分，这串字符也将会被直接执行（在页面中并不显示）出来。由此造成即使页面的 top或者padding 设置为0，也无法让整个网页紧贴浏览器顶部，因为在html一开头有这3个隐藏字符！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;HTML-&amp;amp;#65279导致页面顶部空白一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;静态html页面，在浏览器中测试的时候，发现其中一个html页面的顶部多出了些许空白，而另一个页面显示正常。在浏览器中进行了审查对比，发现有空白的那个页
      
    
    </summary>
    
    
      <category term="html" scheme="http://blog.leepeng.top/tags/html/"/>
    
      <category term="小问题" scheme="http://blog.leepeng.top/tags/%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.leepeng.top/2017/04/19/hello-world/"/>
    <id>http://blog.leepeng.top/2017/04/19/hello-world/</id>
    <published>2017-04-18T16:00:00.000Z</published>
    <updated>2018-04-26T10:31:44.873Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to LeePeng’s <a href="www.leepeng.top/">blog</a>! </p><p><img src="/images/about-bg.jpg" class="full-image"></p><p>我是李鹏，web前端 &amp; 设计师。<br>音乐重度依赖患者，设计师强迫症患者，<br>书买得比看得多患者，毒舌患者，<br>间歇性感伤患者，<br>习惯性熬夜患者。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to LeePeng’s &lt;a href=&quot;www.leepeng.top/&quot;&gt;blog&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/about-bg.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我是李鹏，web前端 &amp;
      
    
    </summary>
    
    
  </entry>
  
</feed>
