<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[倒计时效果]]></title>
    <url>%2F2017%2F08%2F06%2F2017-08-06-time%2F</url>
    <content type="text"><![CDATA[倒计时效果 当前时间 倒计时1 距离设置时间还有天倒计时2 距离设置时间2118/1/1,00:00:00还有 window.onload= function () { showtime(); dao1(); dao2(); } function formatTime(i){ if(i 0 ){ document.getElementById('dao1').innerHTML = daytime; } } //倒计时1 //倒计时2 function dao2(){ let nowtime = new Date(); let endtime = new Date("2118/1/1,00:00:00"); let time = parseInt((endtime.getTime() - nowtime.getTime())/1000);//秒 let d = parseInt(time/(24*60*60)); let h = parseInt(time/(60*60)%24); let m = parseInt(time/60%60); let s = parseInt(time%60); m = formatTime(m); s = formatTime(s); document.getElementById('dao2').innerHTML = d+'天'+h+'时'+m+'分'+s+'秒'; setTimeout(dao2,500) } 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;p&gt;当前时间&lt;/p&gt;&lt;div id="time"&gt;&lt;/div&gt;&lt;p&gt;倒计时1&lt;/p&gt;&lt;div class="dao1"&gt;距离设置时间还有&lt;span id="dao1"&gt;&lt;/span&gt;天&lt;/div&gt;&lt;p&gt;倒计时2&lt;/p&gt;&lt;div class="dao2"&gt;距离设置时间2118/1/1,00:00:00还有&lt;span id="dao2"&gt;&lt;/span&gt;&lt;/div&gt;&lt;script&gt; window.onload= function () &#123; showtime(); dao1(); dao2(); &#125; function formatTime(i)&#123; if(i&lt;10)&#123; i='0'+i; &#125; return i; &#125; //当前时间 function showtime()&#123; let myDate = new Date(); let year = myDate.getFullYear();//年 let month = myDate.getMonth();//月 let date = myDate.getDate();//日 let day = myDate.getDay();//星期 let h = myDate.getHours();//时 let m = myDate.getMinutes();//分 let s = myDate.getSeconds();//秒 m = formatTime(m); s = formatTime(s); let time=document.getElementById("time"); let weekday = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六',''] time.innerHTML=year+'年'+month+'月'+date+'日 '+weekday[day]+' '+h+':'+m+':'+s; setTimeout(showtime,500); &#125; //当前时间 //倒计时1 function dao1()&#123; let curtime = new Date(); let endtime = new Date("2018,1,1"); let time = endtime.getTime() - curtime.getTime();//getTime()毫秒 //1000 * 60 * 60 * 24一天的秒数 //利用Math.ceil()对象方法，对得出的时间差进行向上取整。 //parseInt()取整。 daytime = parseInt(time/(1000 * 60 * 60 * 24)) if(daytime &gt; 0 )&#123; document.getElementById('dao1').innerHTML = daytime; &#125; &#125; //倒计时1 //倒计时2 function dao2()&#123; let nowtime = new Date(); let endtime = new Date("2118/1/1,00:00:00"); let time = parseInt((endtime.getTime() - nowtime.getTime())/1000);//秒 let d = parseInt(time/(24*60*60)); let h = parseInt(time/(60*60)%24); let m = parseInt(time/60%60); let s = parseInt(time%60); m = formatTime(m); s = formatTime(s); document.getElementById('dao2').innerHTML = d+'天'+h+'时'+m+'分'+s+'秒'; setTimeout(dao2,500) &#125; //倒计时2&lt;/script&gt;]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6-set-map]]></title>
    <url>%2F2017%2F08%2F05%2F2017-08-05-es6-set%2F</url>
    <content type="text"><![CDATA[ES6-set-map set1、新建new Set([‘…’]) 2、获取个数.size 3、添加add、删除delete、是否包含has、清除clear 4、开发中用于去除重复数据 5、keys和values都是相等的 6、类似于数组没有重复的元素（唯一的）let s=new Set([1,2,3,3]);console.log(“arr:”,arr)s.add(4)s.delete(2)console.log(“s:”,s.has(4))console.log(“s:”,s.keys())console.log(“s:”,s.values())s.clear() mapconst map = new Map([ [‘name’,’leepeng’], [‘age’,24], [‘sex’,’男’], [obj1,’sfsfdsfe’], [obj2,’lihfksdnsiu’], [[1,2,3],’haha’]])map.set(‘friends’,[‘ffff’,’gggg’])console.log(map.size)console.log(map)console.log(map.get(‘name’))console.log(map.delete(‘name’))console.log(map.has(‘age’))//map.clear();console.log(map)map.forEach(function (value,index) { console.log(index+’:’+value)})]]></content>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML-&#65279导致页面顶部空白一行]]></title>
    <url>%2F2017%2F08%2F05%2F2017-08-05-html%2F</url>
    <content type="text"><![CDATA[HTML-&amp;#65279导致页面顶部空白一行 静态html页面，在浏览器中测试的时候，发现其中一个html页面的顶部多出了些许空白，而另一个页面显示正常。在浏览器中进行了审查对比，发现有空白的那个页面的head标签里面的元素全部跑到了body里面，而且body中还多出了一个，当把这个东西删除之后就正常了。然后又在编辑器中，对比了一下这两个页面的源码，发现head部分完全一样，body中的代码也没有什么异常。最后通过查阅相关资料，才发现原来是编码的问题。页面的编码如果是UTF-8 + BOM，会在body开头处加入一个可见的控制符，导致页面头部会出现一个空白。这种编码方式一般会在windows操作系统中出现，比如记事本编辑器，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM）。它是一串隐藏的字符，用于让记事本等编辑器识别这个文件是否以UTF-8编码。对于一般的文件，这样并不会产生什么麻烦。但对于html来说，BOM是个大麻烦。因为浏览器在解析html页面时，并不会忽略BOM，所以在解析html文件时，会把BOM作为该文件开头正文的一部分，这串字符也将会被直接执行（在页面中并不显示）出来。由此造成即使页面的 top或者padding 设置为0，也无法让整个网页紧贴浏览器顶部，因为在html一开头有这3个隐藏字符！]]></content>
      <tags>
        <tag>html</tag>
        <tag>小问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6-let,const]]></title>
    <url>%2F2017%2F08%2F05%2F2017-08-05-es6-lensson1%2F</url>
    <content type="text"><![CDATA[ES6第一课，let const let命令1、let命令， 用来声明变量。 它的用法类似于var， 但是所声明的变量， 只在let命令所在的代码块内有效。2、变量一定要在声明后使用， 否则报错。3、使用let命令声明变量之前， 该变量都是不可用的。4、变量x使用let命令声明， 所以在声明之前， 都属于x的“死区”， 只要用到该变量就会报错。 因此， typeof运行时就会抛出一个ReferenceError。5、let不允许在相同作用域内， 重复声明同一个变量。eg:{ let a = 10; var b = 1;}console.log(a) // ReferenceError: a is not defined.console.log(b) // 1for循环的计数器，很适合使用let eg: for(let i =0;i&lt; arr.length;i++ ){} console.log(i) // ReferenceError: a is not defined. const 命令1、const声明一个只读的常量。 一旦声明， 常量的值就不能改变。（ eg 1 ）2、const声明的变量不得改变值， 这意味着， const一旦声明变量， 就必须立即初始化， 不能留到以后赋值。3、const的作用域与let命令相同： 只在声明所在的块级作用域内有效。4、const命令声明的常量也是不提升， 同样存在暂时性死区， 只能在声明的位置后面使用。eg 1:const PI = 3.1415;PI // 3.1415PI = 3;// TypeError: Assignment to constant variable.对于复合类型的变量， 变量名不指向数据， 而是指向数据所在的地址。const命令只是保证变量名指向的地址不变， 并不保证该地址的数据不变， 所以将一个对象声明为常量必须非常小心。const foo = {};foo.prop = 123;foo.prop// 123foo = {}; // TypeError: “foo” is read-only上面代码中， 常量foo储存的是一个地址， 这个地址指向一个对象。 不可变的只是这个地址， 即不能把foo指向另一个地址， 但对象本身是可变的， 所以依然可以为其添加新属性。]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框]]></title>
    <url>%2F2017%2F05%2F02%2F2017-05-02-bootstrap-addiframe-close-modal%2F</url>
    <content type="text"><![CDATA[bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框 bootstrap在模态框里加载iframe页面（iframe里的关闭按钮）的时候如何关闭模态框window.parent.$(‘#myModal’).modal(‘hide’); eg:window.self功能：是对当前窗口自身的引用。它和window属性是等价的。语法：window.self注：window、self、window.self是等价的。 window.top功能：返回顶层窗口，即浏览器窗口。语法：window.top注：如果窗口本身就是顶层窗口，top属性返回的是对自身的引用。 window.parent功能：返回父窗口。语法：window.parent注：如果窗口本身是顶层窗口，parent属性返回的是对自身的引用。在框架网页中，一般父窗口就是顶层窗口，但如果框架中还有框架，父窗口和顶层窗口就不一定相同了。 判断当前窗口是否在一个框架中： &lt; script type=”text/JavaScript“ &gt;var b = window.top!=window.self;document.write( “当前窗口是否在一个框架中：”+b );&lt; /script &gt;]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老是忘记的小问题!]]></title>
    <url>%2F2017%2F05%2F02%2F2017-06-26-lanshiwangjidexiaowenti%2F</url>
    <content type="text"><![CDATA[老是忘记的小问题!（） 1、火狐FF里INPUT标签刷新页面后 仍然保存之前输入的内容。 直接在input 标签里 增加 autocomplete=”off”。火狐默认为 on。]]></content>
      <tags>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[屏蔽双击选中文字的方法!]]></title>
    <url>%2F2017%2F05%2F02%2F2017-05-02-pingbishuangjixuanzhongzi%2F</url>
    <content type="text"><![CDATA[屏蔽双击选中文字的方法! FF用样式 ：-moz-user-select:none; FF以外的浏览器用：onselectstart=”return false”（直接加在需要作用的标签） eg: &lt;div class=”test” onselectstart=”return false” style=”-moz-user-select:none;” &gt;你选不到我。。。（屏蔽双击选中文字的区域）&lt;/div&gt; 如果你在标签里加了onselectstart=”return false” 那标签内的文字都没法选中了。。 css禁止双击页面选中文本user-select：none | text | all | element默认值：text适用于：除替换元素外的所有元素继承性：无动画性：否计算值：指定值取值：none：文本不能被选择text：可以选择文本all：当所有内容作为一个整体时可以被选择。如果双击或者在上下文上点击子元素，那么被选择的部分将是以该子元素向上回溯的最高祖先元素。element：可以选择文本，但选择范围受元素边界的约束]]></content>
      <tags>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
